using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Reflection;
using NHibernate;
using NHibernate.Cfg;
using NHibernate.Criterion;
using System.Data.SqlClient;
using NHibernate.Transform;
namespace PersistenceFactory
{
    public class PersistenceServiceFactory : IDisposable//, IExecuteStoredProcedure
    {
        #region Properties
        public static ISessionFactory sessionFactory;
        const string sType = "Asc";
        const string sPercentage = "%";
        /// <summary>
        /// gets and sets the session property
        /// </summary>
        public ISession Session { get; private set; }
        /// <summary>
        /// gets and sets the session property Transaction Property
        /// </summary>
        public ITransaction Transaction { get; private set; }
        //private bool isDisposed = false;
        #endregion

        #region Constructor / Destructor
        /// <summary>
        /// Configuring and building service factory will be done by this default constructor
        /// </summary>
        /// 
        private static object _syncObject = new object();
        /// <summary>
        /// 
        /// </summary>
        public PersistenceServiceFactory()
        {
            try
            {
                lock (_syncObject)
                {
                    if (sessionFactory == null)
                    {
                        Configuration config = new Configuration().Configure();
                        config.AddAssembly(Assembly.GetCallingAssembly());
                        sessionFactory = config.BuildSessionFactory();
                    }
                }
            }
            catch (Exception)
            {
                throw;
            }
        }

        /// <summary>
        /// Configuring and building service factory will be done by this default constructor
        /// </summary>
        public PersistenceServiceFactory(string assemblyName)
        {
            try
            {
                lock (_syncObject)
                {
                    if (sessionFactory == null)
                    {
                        Configuration config = new Configuration().Configure();
                        config.AddAssembly(Assembly.Load(assemblyName));
                        sessionFactory = config.BuildSessionFactory();
                    }
                }
            }
            catch (Exception)
            {
                throw;
            }
        }

        /// <summary>
        /// Configuring and building service factory will be done by this default constructor
        /// The list parameter will contain the possible assemblies to be loaded
        /// </summary>
        /// <param name="assemblyName"></param>
        public PersistenceServiceFactory(List<String> assemblyName)
        {
            try
            {
                //HibernatingRhinos.Profiler.Appender.NHibernate.NHibernateProfiler.Initialize();
                lock (_syncObject)
                {
                    if (sessionFactory == null)
                    {
                        Configuration config = new Configuration().Configure();
                        foreach (String listitem in assemblyName)
                        {
                            config.AddAssembly(Assembly.Load(listitem));
                        }
                        sessionFactory = config.BuildSessionFactory();
                        //to log the sql query which is generated by nhibernate
                        //log4net.Config.XmlConfigurator.Configure();
                    }
                }
            }
            catch (Exception)
            {
                throw;
            }
        }
        /// <summary>
        /// Destructor implementation
        /// </summary>
        ~PersistenceServiceFactory()
        {
            Dispose(false);
        }

        #endregion


        #region Methods

        /// <summary>
        /// Saves the given Object
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="obj"></param>
        public void Save<T>(T obj)
        {
            try
            {
                using (ISession session = sessionFactory.OpenSession())
                {
                    using (session.BeginTransaction())
                    {
                        session.Save(obj);
                        session.Transaction.Commit();
                    }
                }
            }
            catch (Exception)
            {
                throw;
            }
        }
        public void Save<T>(T obj, ISession session)
        {
            try
            {

                using (session.BeginTransaction())
                {
                    session.Save(obj);
                    session.Transaction.Commit();
                }
            }
            catch (Exception)
            {
                throw;
            }
        }
        /// <summary>
        /// To Save the List of Objects
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="objList"></param>
        public bool Save<T>(IList<T> objList)
        {
            bool Result = false;
            try
            {
                using (ISession session = sessionFactory.OpenSession())
                {
                    using (session.BeginTransaction())
                    {
                        foreach (T obj in objList)
                        {
                            session.Save(obj);
                        }
                        session.Transaction.Commit();
                        Result = true;
                    }
                }
            }
            catch (Exception ex)
            {
                throw;
            }
            return Result;
        }

        /// <summary>
        /// Updates the given Object
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="obj"></param>
        public void SaveOrUpdate<T>(T obj)
        {
            try
            {
                using (ISession session = sessionFactory.OpenSession())
                {
                    using (session.BeginTransaction())
                    {
                        try
                        {
                            session.SaveOrUpdate(obj);
                            session.Transaction.Commit();
                        }
                        catch (Exception)
                        {
                            session.Transaction.Rollback();
                        }
                    }
                }
            }
            catch (Exception)
            {
                throw;
            }
        }
        /// <summary>
        /// Save or Update for list of objects
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="objList"></param>
        /// <returns></returns>
        public bool SaveOrUpdate<T>(IList<T> objList)
        {
            bool Result = false;
            try
            {
                using (ISession session = sessionFactory.OpenSession())
                {
                    using (session.BeginTransaction())
                    {
                        //System.Threading.Tasks.Parallel.ForEach(objList, obj =>
                        //{
                        //    session.SaveOrUpdate(obj);
                        //});
                        foreach (T obj in objList) { session.SaveOrUpdate(obj); }
                        session.Transaction.Commit();
                        Result = true;

                    }
                }
            }
            catch (Exception)
            {
                throw;
            }
            return Result;
        }
        public List<T> ExecuteSPFromNHibernate<T>(string column, string value, string namedQuery)
        {
            //Check.Require(!string.IsNullOrEmpty(customerId), "customerId may not be null or empty");
            using (ISession session = sessionFactory.OpenSession())
            {
                using (session.BeginTransaction())
                {
                    //var query1 = session.CreateSQLQuery("EXEC myStoredProc :p1, :p2");
                    //query1.SetParameter("p1", "someValue");
                    //query1.SetParameter("p2", 5);
                    //return query.List<T>() as List<T>;
                    IQuery query = session.GetNamedQuery(namedQuery)
                          .SetParameter("Period", "P01").SetParameter("PeriodYear", "14-15")
                          .SetResultTransformer(
                          new NHibernate.Transform.AliasToBeanConstructorResultTransformer(
                            typeof(T).GetConstructors()[0]));

                    //var results = Session.GetNamedQuery("SummaryReport")
                    //                .SetInt32("productId", productId)
                    //                .SetResultTransformer(
                    //                new AliasToBeanResultTransformer(typeof(SummaryReport)));
                    //                return results.List<SummaryReport>();

                    return query.List<T>() as List<T>;
                }
            }
        }
        public bool SaveOrUpdate<T>(IList<T> objList, ISession session)
        {
            bool Result = false;
            try
            {
                using (session.BeginTransaction())
                {
                    foreach (T obj in objList)
                    {
                        session.SaveOrUpdate(obj);
                    }
                    session.Transaction.Commit();
                    Result = true;
                }
            }
            catch (Exception)
            {
                throw;
            }
            return Result;
        }
        /// <summary>
        /// Updates the given Object
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="obj"></param>
        public void Update<T>(T obj)
        {
            try
            {
                using (ISession session = sessionFactory.OpenSession())
                {
                    using (session.BeginTransaction())
                    {
                        session.Update(obj);
                        session.Transaction.Commit();
                    }
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        /// <summary>
        /// To update the collection of objects
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="objList"></param>
        /// <returns></returns>
        public bool Update<T>(IList<T> objList)
        {
            bool Result = false;
            try
            {
                using (ISession session = sessionFactory.OpenSession())
                {
                    using (session.BeginTransaction())
                    {
                        foreach (T obj in objList)
                        {
                            session.Update(obj);
                        }
                        session.Transaction.Commit();
                        Result = true;
                    }
                }
            }
            catch (Exception)
            {
                throw;
            }
            finally
            {
                CloseSession();
            }
            return Result;
        }
        /// <summary>
        /// Deletes the given Object
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="obj"></param>
        public void Delete<T>(T obj)
        {
            try
            {
                using (ISession session = sessionFactory.OpenSession())
                {
                    using (session.BeginTransaction())
                    {
                        session.Delete(obj);
                        session.Transaction.Commit();
                    }
                }
            }
            catch (Exception)
            {
                throw;
            }
        }

        /// <summary>
        /// Deletes the given Object by passing a query
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="query"></param>
        public void Delete<T>(string query)
        {
            try
            {
                using (ISession session = sessionFactory.OpenSession())
                {
                    using (session.BeginTransaction())
                    {
                        //creating query to delete a particular object with criteria
                        //this is for the deletion of one particular object
                        IQuery iQuery = session.CreateQuery(query);
                        //this will retrieve the top one object for that criteria
                        T t = iQuery.List<T>()[0];
                        //deletes that particulat object
                        session.Delete(t);
                        session.Transaction.Commit();
                    }
                }
            }
            catch (Exception)
            {
                throw;
            }
        }
        /// <summary>
        /// 
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="list"></param>
        public void DeleteAll<T>(IList<T> list)
        {
            try
            {
                using (ISession session = sessionFactory.OpenSession())
                {
                    using (session.BeginTransaction())
                    {
                        foreach (T item in list)
                        {
                            session.Delete(item);
                        }
                        //session.Delete(obj);
                        session.Transaction.Commit();
                    }
                }
            }
            catch (Exception)
            {
                throw;
            }
            finally
            {
                CloseSession();
            }
        }
        public T GetComposite<T>(object id)
        {
            try
            {
                using (ISession session = sessionFactory.OpenSession())
                {
                    using (session.BeginTransaction())
                    {
                        return (T)session.Load(typeof(T), id);
                    }
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        /// <summary>
        /// To Get a Particular Record of Type T by passing Id
        /// </summary>
        /// <typeparam name="T">the type</typeparam>
        /// <param name="id">long identifier</param>
        /// <returns>returns Particular Record of Type T</returns>
        public T Get<T>(Int64 id)
        {
            try
            {
                using (ISession session = sessionFactory.OpenSession())
                {
                    using (session.BeginTransaction())
                    {
                        return session.Get<T>(id);
                    }
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        public T Get<T>(string name, string value)
        {
            try
            {
                using (ISession session = sessionFactory.OpenSession())
                {
                    using (session.BeginTransaction())
                    {
                        ICriteria _criteriaGroup = session.CreateCriteria(typeof(T));
                        _criteriaGroup.Add(Restrictions.Eq(name, value));
                        T item = _criteriaGroup.List<T>().FirstOrDefault<T>();
                        return item;
                    }
                }
            }
            catch (Exception) { throw; }
        }
        public T Get<T>(T id)
        {
            try
            {
                using (ISession session = sessionFactory.OpenSession())
                {
                    using (session.BeginTransaction())
                    {
                        return session.Get<T>(id);
                    }
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public T Get<T>(string name, long value)
        {
            try
            {
                using (ISession session = sessionFactory.OpenSession())
                {
                    using (session.BeginTransaction())
                    {
                        ICriteria _criteriaGroup = session.CreateCriteria(typeof(T));
                        _criteriaGroup.Add(Restrictions.Eq(name, value));
                        T item = _criteriaGroup.List<T>().FirstOrDefault<T>();
                        return item;
                    }
                }
            }
            catch (Exception) { throw; }
        }
        public T Get<T>(string column1, long value1, string column2, string value2)
        {
            try
            {
                using (ISession session = sessionFactory.OpenSession())
                {
                    using (session.BeginTransaction())
                    {
                        ICriteria _criteriaGroup = session.CreateCriteria(typeof(T));
                        _criteriaGroup.Add(Restrictions.Eq(column1, value1));
                        _criteriaGroup.Add(Restrictions.Eq(column2, value2));
                        T item = _criteriaGroup.List<T>().FirstOrDefault<T>();
                        return item;
                    }
                }
            }
            catch (Exception) { throw; }
        }
        public T Get<T>(string column1, string value1, string column2, string value2)
        {
            try
            {
                using (ISession session = sessionFactory.OpenSession())
                {
                    using (session.BeginTransaction())
                    {
                        ICriteria _criteriaGroup = session.CreateCriteria(typeof(T));
                        _criteriaGroup.Add(Restrictions.Eq(column1, value1));
                        _criteriaGroup.Add(Restrictions.Eq(column2, value2));
                        T item = _criteriaGroup.List<T>().FirstOrDefault<T>();
                        return item;
                    }
                }
            }
            catch (Exception) { throw; }
        }
        public T Get<T>(string column1, string value1, string column2, string value2, string column3, string value3)
        {
            try
            {
                using (ISession session = sessionFactory.OpenSession())
                {
                    using (session.BeginTransaction())
                    {
                        ICriteria _criteriaGroup = session.CreateCriteria(typeof(T));
                        _criteriaGroup.Add(Restrictions.Eq(column1, value1));
                        _criteriaGroup.Add(Restrictions.Eq(column2, value2));
                        _criteriaGroup.Add(Restrictions.Eq(column3, value3));
                        T item = _criteriaGroup.List<T>().FirstOrDefault<T>();
                        return item;
                    }
                }
            }
            catch (Exception) { throw; }
        }
        public T Get<T>(string column1, long value1, string column2, string value2, string column3, bool value3)
        {
            try
            {
                using (ISession session = sessionFactory.OpenSession())
                {
                    using (session.BeginTransaction())
                    {
                        ICriteria _criteriaGroup = session.CreateCriteria(typeof(T));
                        _criteriaGroup.Add(Restrictions.Eq(column1, value1));
                        _criteriaGroup.Add(Restrictions.Eq(column2, value2));
                        _criteriaGroup.Add(Restrictions.Eq(column3, value3));
                        T item = _criteriaGroup.List<T>().FirstOrDefault<T>();
                        return item;
                    }
                }
            }
            catch (Exception) { throw; }
        }
        public T Get<T>(string column1, long value1, string column2, long value2)
        {
            try
            {
                using (ISession session = sessionFactory.OpenSession())
                {
                    using (session.BeginTransaction())
                    {
                        ICriteria _criteriaGroup = session.CreateCriteria(typeof(T));
                        _criteriaGroup.Add(Restrictions.Eq(column1, value1));
                        _criteriaGroup.Add(Restrictions.Eq(column2, value2));
                        T item = _criteriaGroup.List<T>().FirstOrDefault<T>();
                        return item;
                    }
                }
            }
            catch (Exception) { throw; }
        }
        public T Get<T>(string column1, long value1, string column2, int value2)
        {
            try
            {
                using (ISession session = sessionFactory.OpenSession())
                {
                    using (session.BeginTransaction())
                    {
                        ICriteria _criteriaGroup = session.CreateCriteria(typeof(T));
                        _criteriaGroup.Add(Restrictions.Eq(column1, value1));
                        _criteriaGroup.Add(Restrictions.Eq(column2, value2));
                        T item = _criteriaGroup.List<T>().FirstOrDefault<T>();
                        return item;
                    }
                }
            }
            catch (Exception) { throw; }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="id"></param>
        /// <returns></returns>
        public T Get<T>(int id)
        {
            try
            {
                using (ISession session = sessionFactory.OpenSession())
                {
                    using (session.BeginTransaction())
                    {
                        //Set return value
                        return session.Get<T>(id);
                    }
                }
            }
            catch (Exception)
            {
                throw;
            }

        }


        /// <summary>
        /// To Get all the Records of Type T
        /// </summary>
        /// <param name="id"></param>
        /// <returns>All the records will be returned as List</returns>
        public IList<T> GetList<T>()
        {
            try
            {
                using (ISession session = sessionFactory.OpenSession())
                {
                    using (session.BeginTransaction())
                    {
                        // Retrieve all objects of the type passed in
                        IList<T> itemList = session.CreateCriteria(typeof(T))
                            .SetMaxResults(100)
                            .List<T>();
                        // Set return value
                        return itemList;
                    }
                }
            }
            catch (Exception)
            {
                throw;
            }

        }

        /// <summary>
        /// retrive all by using string as parameter
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="query"></param>
        /// <returns></returns>
        public IList<T> GetListByName<T>(string query)
        {
            try
            {
                using (ISession session = sessionFactory.OpenSession())
                {
                    using (session.BeginTransaction())
                    {
                        IQuery iquery = session.CreateQuery(query);
                        // Retrieve all objects of the type passed in
                        IList<T> itemList = iquery.List<T>();
                        //itemList.Add(session.Get<T>(id));
                        // Set return value
                        return itemList;
                    }
                }
            }
            catch (Exception)
            {
                throw;
            }
        }

        /// <summary>
        /// To Get a Particular Record of Type T by passing query
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="query"></param>
        /// <returns>Particular Record of Type T will be returned</returns>
        public T Get<T>(string query)
        {
            try
            {
                using (ISession session = sessionFactory.OpenSession())
                {
                    using (session.BeginTransaction())
                    {
                        IQuery iquery = session.CreateQuery(query).SetMaxResults(1);
                        //Set return value
                        return session.Get<T>(iquery);
                    }
                }
            }
            catch (Exception)
            {
                throw;
            }
        }
        /// <summary>
        /// Getting the List by passing one Criteria i.e non-identity column filter
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="propertyName">Name of the property.</param>
        /// <param name="propertyValue">The property value.</param>
        /// <returns></returns>
        public IList<T> GetListWithCriteria<T>(string propertyName, object propertyValue)
        {
            try
            {
                using (ISession session = sessionFactory.OpenSession())
                {
                    using (session.BeginTransaction())
                    {
                        // Create a criteria object with the specified criteria
                        ICriteria criteria = session.CreateCriteria(typeof(T));

                        criteria.Add(Expression.Eq(propertyName, propertyValue));
                        //criteria.AddOrder(Order.Desc);  

                        // Get the matching objects
                        IList<T> matchingObjects = criteria.List<T>();

                        // Set return value
                        return matchingObjects;
                    }
                }
            }
            catch (Exception)
            {
                throw;
            }

        }
        /// <summary>
        /// Gets the list with criteria.
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="hashtable">The hashtable.</param>
        /// <returns></returns>
        public IList<T> GetListWithCriteria<T>(Hashtable hashtable)
        {
            try
            {
                using (ISession session = sessionFactory.OpenSession())
                {
                    using (session.BeginTransaction())
                    {
                        // Create a criteria object with the specified criteria
                        ICriteria criteria = session.CreateCriteria(typeof(T));

                        foreach (DictionaryEntry dicEntry in hashtable)
                        {
                            criteria.Add(Expression.Eq(dicEntry.Key.ToString(), dicEntry.Value));
                        }

                        IList<T> matchingObjects = criteria.List<T>();

                        return matchingObjects;
                    }
                }
            }
            catch (Exception)
            {
                throw;
            }
        }
        /// <summary>
        /// Gets the count.
        /// </summary>
        /// <param name="type">The type.</param>
        /// <returns></returns>
        public int GetCount(Type type)
        {
            try
            {
                using (ISession session = sessionFactory.OpenSession())
                {
                    using (session.BeginTransaction())
                    {
                        // Create a criteria object with the specified criteria
                        ICriteria criteria = session.CreateCriteria(type);
                        //long count = Convert.ToInt64(criteria.SetProjection(Projections.RowCountInt64()).List()[0]);
                        return criteria.List().Count;
                    }
                }
            }
            catch (Exception)
            {
                throw;
            }

        }
        public int GetCountForCriteria(Type type, Dictionary<string, object> searchCriteria)
        {
            try
            {
                using (ISession session = sessionFactory.OpenSession())
                {
                    using (session.BeginTransaction())
                    {
                        // Create a criteria object with the specified criteria
                        ICriteria criteria = session.CreateCriteria(type);
                        if (searchCriteria.Count > 0)
                        {
                            foreach (KeyValuePair<string, object> keyValuePair in searchCriteria.Where(x => x.Value != null))
                            {
                                if (keyValuePair.Value.GetType() == typeof(string))
                                {
                                    criteria.Add(Expression.Like(keyValuePair.Key.ToString(), sPercentage + keyValuePair.Value + sPercentage).IgnoreCase());
                                }
                                else if (keyValuePair.Value.GetType().IsPrimitive)
                                {
                                    criteria.Add(Expression.Eq(keyValuePair.Key, keyValuePair.Value));
                                }
                                else if (keyValuePair.Value.GetType() == typeof(DateTime))
                                {
                                    criteria.Add(Expression.Eq(keyValuePair.Key, keyValuePair.Value));
                                }
                                else if (keyValuePair.Value.GetType() == typeof(DateTime))
                                {
                                    DateTime dt = Convert.ToDateTime(keyValuePair.Value);
                                    dt = dt.Date;
                                    criteria.Add(Expression.Between(keyValuePair.Key, dt, dt));
                                }
                            }
                        }
                        int count = Convert.ToInt32(criteria.SetProjection(Projections.RowCountInt64()).List()[0]);
                        return count;
                    }
                }
            }
            catch (Exception)
            {
                throw;
            }

        }
        /// <summary>
        /// GetCount For Criteria for a type
        /// </summary>
        /// <param name="type"></param>
        /// <param name="searchCriteria"></param>
        /// <returns></returns>
        public int GetCountForCriteria(Type type, Dictionary<string, string> searchCriteria)
        {
            try
            {
                using (ISession session = sessionFactory.OpenSession())
                {
                    using (session.BeginTransaction())
                    {
                        // Create a criteria object with the specified criteria
                        ICriteria criteria = session.CreateCriteria(type);
                        if (searchCriteria.Count > 0)
                        {
                            foreach (KeyValuePair<string, string> keyValuePair in searchCriteria)
                            {
                                criteria.Add(Expression.Like(keyValuePair.Key.ToString(), sPercentage + keyValuePair.Value + sPercentage).IgnoreCase());
                            }
                        }
                        return criteria.List().Count;
                    }
                }
            }
            catch (Exception)
            {
                throw;
            }

        }
        /// <summary>
        /// Gets the list with search criteria.
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="page">The page.</param>
        /// <param name="pageSize">Size of the page.</param>
        /// <param name="sortType">Type of the sort.</param>
        /// <param name="sortBy">The sort by.</param>
        /// <param name="searchCriteria">The search criteria.</param>
        /// <returns></returns>
        public IList<T> GetListWithSearchCriteria<T>(int? page, int? pageSize, string sortType, string sortBy, Dictionary<string, string> searchCriteria)
        {
            try
            {
                using (ISession session = sessionFactory.OpenSession())
                {
                    using (session.BeginTransaction())
                    {
                        // Create a criteria object with the specified criteria
                        ICriteria criteria = session.CreateCriteria(typeof(T));
                        if (searchCriteria != null)
                        {
                            if (searchCriteria.Count > 0)
                            {
                                foreach (KeyValuePair<string, string> keyValuePair in searchCriteria)
                                {
                                    criteria.Add(Expression.Like(keyValuePair.Key.ToString(), sPercentage + keyValuePair.Value + sPercentage).IgnoreCase());
                                }
                            }
                        }
                        if (sortType != null && sortBy != null && sortType.Length != 0 && sortBy.Length != 0)
                        {
                            if (sortType == sType) criteria.AddOrder(Order.Asc(sortBy));
                            else criteria.AddOrder(Order.Desc(sortBy));
                        }
                        //var count = criteria.FutureValue<int>();
                        if (page != 0 && page != null)
                        {
                            criteria.SetFirstResult((int)(page * pageSize));
                        }
                        if (pageSize != 0 && pageSize != null)
                            criteria.SetMaxResults((int)pageSize);
                        else criteria.SetMaxResults(20);
                        IList<T> matchingObjects = criteria.List<T>();
                        if (criteria != null) criteria = null;
                        return matchingObjects;
                    }
                }
            }
            catch (Exception)
            {
                throw;
            }
        }

        /// <summary>
        /// Gets the list with search criteria.
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="page">The page.</param>
        /// <param name="pageSize">Size of the page.</param>
        /// <param name="sortType">Type of the sort.</param>
        /// <param name="sortBy">The sort by.</param>
        /// <param name="searchCriteria">The search criteria.</param>
        /// <param name="searchCriteriaForNumeric">The search criteria for numeric.</param>
        /// <returns></returns>
        public IList<T> GetListWithSearchCriteria<T>(int? page, int? pageSize, string sortType, string sortBy, Dictionary<string, string> searchCriteria, Dictionary<string, long> searchCriteriaForNumeric)
        {
            try
            {
                using (ISession session = sessionFactory.OpenSession())
                {
                    // Create a criteria object with the specified criteria
                    ICriteria criteria = session.CreateCriteria(typeof(T));
                    if (searchCriteria.Count > 0)
                    {
                        foreach (KeyValuePair<string, string> keyValuePair in searchCriteria)
                        {
                            criteria.Add(Expression.Like(keyValuePair.Key.ToString(), sPercentage + keyValuePair.Value + sPercentage).IgnoreCase());
                        }
                    }

                    if ((searchCriteriaForNumeric != null) && (searchCriteriaForNumeric.Count > 0))
                    {
                        foreach (KeyValuePair<string, long> keyValuePair in searchCriteriaForNumeric)
                        {
                            criteria.Add(Expression.Eq(keyValuePair.Key, keyValuePair.Value));
                        }
                    }

                    if (sortType.Length != 0 && sortBy.Length != 0)
                    {
                        if (sortType == sType) criteria.AddOrder(Order.Asc(sortBy));
                        else criteria.AddOrder(Order.Desc(sortBy));
                    }
                    //var count = criteria.FutureValue<int>();
                    if (page != 0 && page != null)
                    {
                        criteria.SetFirstResult((int)(page * pageSize));
                    }
                    if (pageSize != 0 && pageSize != null)
                        criteria.SetMaxResults((int)pageSize);
                    else criteria.SetMaxResults(20);
                    IList<T> matchingObjects = criteria.List<T>();

                    return matchingObjects;
                }
            }
            catch (Exception)
            {

                throw;
            }

        }

        /// <summary>
        /// Gets the list with count for type T.
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="page">The page.</param>
        /// <param name="pageSize">Size of the page.</param>
        /// <param name="sortType">Type of the sort.</param>
        /// <param name="sortBy">The sort by.</param>
        /// <param name="searchCriteria">The search criteria.</param>
        /// <returns></returns>
        public IList<T> GetListWithSearchCriteria<T>(int? page, int? pageSize, string sortType, string sortBy, Dictionary<string, object> searchCriteria)
        {
            try
            {
                using (ISession session = sessionFactory.OpenSession())
                {
                    // Create a criteria object with the specified criteria
                    ICriteria criteria = session.CreateCriteria(typeof(T));
                    if (searchCriteria.Count > 0)
                    {
                        foreach (KeyValuePair<string, object> keyValuePair in searchCriteria.Where(x => x.Value != null))
                        {
                            if (keyValuePair.Value.GetType() == typeof(string))
                            {
                                criteria.Add(Expression.Like(keyValuePair.Key.ToString(), sPercentage + keyValuePair.Value + sPercentage).IgnoreCase());
                            }
                            else if (keyValuePair.Value.GetType().IsPrimitive)
                            {
                                criteria.Add(Expression.Eq(keyValuePair.Key, keyValuePair.Value));
                            }
                            else if (keyValuePair.Value.GetType() == typeof(DateTime))
                            {
                                //MatchMode.
                                //LikeExpression likeExpression=new LikeExpression(
                                criteria.Add(Expression.Eq(keyValuePair.Key, keyValuePair.Value));
                            }
                        }
                    }
                    if (sortType.Length != 0 && sortBy.Length != 0)
                    {
                        if (sortType == sType) criteria.AddOrder(Order.Asc(sortBy));
                        else criteria.AddOrder(Order.Desc(sortBy));
                    }
                    //var count = criteria.FutureValue<int>();
                    if (page != 0 && page != null)
                    {
                        criteria.SetFirstResult((int)(page * pageSize));
                    }
                    if (pageSize != 0 && pageSize != null)
                        criteria.SetMaxResults((int)pageSize);
                    else criteria.SetMaxResults(20);
                    IList<T> matchingObjects = criteria.List<T>();

                    return matchingObjects;
                }
            }
            catch (Exception)
            {
                throw;
            }
        }
        public Dictionary<long, IList<T>> GetListWithInSearchCriteriaCountArray<T>(int? page, int? pageSize, string sortBy, string sortType, string name, int[] values, Dictionary<string, object> searchCriteria, string[] criteriaAlias)
        {
            try
            {
                Dictionary<long, IList<T>> ListWithCount = new Dictionary<long, IList<T>>();

                using (ISession session = sessionFactory.OpenSession())
                {
                    using (session.BeginTransaction())
                    {
                        // Create a criteria object with the specified criteria
                        ICriteria criteria = session.CreateCriteria(typeof(T));
                        if (criteriaAlias != null && criteriaAlias.Length > 0)
                        {
                            foreach (string strAlias in criteriaAlias)
                            {
                                criteria.CreateAlias(strAlias, strAlias);
                            }
                        }
                        if (!(string.IsNullOrEmpty(name)) && values.Length > 0)
                        {
                            criteria.Add(Expression.In(name, values));
                        }
                        if (searchCriteria != null)
                        {
                            if (searchCriteria.Count > 0)
                            {
                                foreach (KeyValuePair<string, object> keyValuePair in searchCriteria.Where(x => x.Value != null))
                                {
                                    if (keyValuePair.Value.GetType() == typeof(string))
                                    {
                                        criteria.Add(Expression.InsensitiveLike(keyValuePair.Key.ToString(), sPercentage + keyValuePair.Value.ToString().Trim() + sPercentage));
                                    }
                                    else if (keyValuePair.Value.GetType() == typeof(string[]))
                                    {
                                        string[] arr = ((IEnumerable)keyValuePair.Value).Cast<object>().Select(x => x.ToString()).ToArray();
                                        if (arr != null && arr.Length > 0)
                                            criteria.Add(Expression.In(keyValuePair.Key.ToString(), arr));
                                        //criteria.Add(Expression.InsensitiveLikee(keyValuePair.Ky.ToString(), sPercentage + keyValuePair.Value.ToString().Trim() + sPercentage));
                                    }
                                    else if (keyValuePair.Value.GetType().IsPrimitive)
                                    {
                                        criteria.Add(Expression.Eq(keyValuePair.Key, keyValuePair.Value));
                                    }
                                    else if (keyValuePair.Value.GetType() == typeof(DateTime))
                                    {
                                        criteria.Add(Expression.InsensitiveLike(keyValuePair.Key, keyValuePair.Value));
                                    }
                                    else if (keyValuePair.Value.GetType() == typeof(DateTime[]))
                                    {
                                        DateTime[] datetime = new DateTime[2];
                                        datetime = (DateTime[])keyValuePair.Value;
                                        criteria.Add(Expression.Between(keyValuePair.Key, datetime[0], datetime[1]));
                                    }
                                    else if (keyValuePair.Value.GetType() == typeof(Int64[]))
                                    {
                                        Int64[] integer = new Int64[2];
                                        integer = (Int64[])keyValuePair.Value;
                                        criteria.Add(Expression.Between(keyValuePair.Key, integer[0], integer[1]));
                                    }
                                }
                            }
                        }
                        ICriteria countCriteria = (ICriteria)criteria.Clone();
                        long count = Convert.ToInt64(countCriteria.SetProjection(Projections.RowCountInt64()).List()[0]);
                        if (sortType != null && sortBy != null && sortType.Length != 0 && sortBy.Length != 0)
                        {
                            if (sortType == sType) criteria.AddOrder(Order.Asc(sortBy));
                            else criteria.AddOrder(Order.Desc(sortBy));
                        }

                        //var count = criteria.FutureValue<int>();
                        if (page != 0 && page != null)
                        {
                            criteria.SetFirstResult((int)(page * pageSize));
                        }
                        if (pageSize != 0 && pageSize != null)
                            criteria.SetMaxResults((int)pageSize);
                        else criteria.SetMaxResults(20);
                        IList<T> matchingObjects = criteria.List<T>();
                        if (criteria != null) criteria = null;
                        if (count > 0 && matchingObjects.Count > 0)
                            ListWithCount.Add(count, matchingObjects);
                        //ListWithCount.count = criteria.List().Count;
                        return ListWithCount;
                    }
                }
            }
            catch (Exception)
            {

                throw;
            }
        }
        public Dictionary<long, IList<T>> GetListWithEQSearchCriteriaCount<T>(int? page, int? pageSize, string sortBy, string sortType, Dictionary<string, object> searchCriteria, string name, string[] values, string[] alias)
        {
            try
            {
                Dictionary<long, IList<T>> ListWithCount = new Dictionary<long, IList<T>>();

                using (ISession session = sessionFactory.OpenSession())
                {
                    using (session.BeginTransaction())
                    {
                        // Create a criteria object with the specified criteria
                        ICriteria criteria = session.CreateCriteria(typeof(T));
                        if (alias != null && alias.Length > 0)
                        {
                            foreach (string strAlias in alias)
                            {
                                criteria.CreateAlias(strAlias, strAlias);
                            }
                        }
                        if (!(string.IsNullOrEmpty(name)) && values.Length > 0)
                        {
                            criteria.Add(Expression.In(name, values));
                        }
                        // Create a criteria object with the specified criteria
                        //ICriteria criteria = session.CreateCriteria(typeof(T));
                        if (searchCriteria != null)
                        {
                            if (searchCriteria.Count > 0)
                            {

                                foreach (KeyValuePair<string, object> keyValuePair in searchCriteria.Where(x => x.Value != null))
                                {
                                    if (keyValuePair.Value.GetType() == typeof(string))
                                    {
                                        criteria.Add(Expression.Eq(keyValuePair.Key.ToString(), keyValuePair.Value).IgnoreCase());
                                    }


                                    else if (keyValuePair.Value.GetType().IsPrimitive)
                                    {
                                        criteria.Add(Expression.Eq(keyValuePair.Key, keyValuePair.Value));
                                    }
                                    else if (keyValuePair.Value.GetType() == typeof(DateTime))
                                    {
                                        criteria.Add(Expression.Eq(keyValuePair.Key, keyValuePair.Value));
                                    }
                                    else if (keyValuePair.Value.GetType() == typeof(DateTime[]))
                                    {
                                        DateTime[] datetime = new DateTime[2];
                                        datetime = (DateTime[])keyValuePair.Value;
                                        criteria.Add(Expression.Between(keyValuePair.Key, datetime[0], datetime[1]));
                                        // criteria.Add(Expression.Eq(keyValuePair.Key, keyValuePair.Value));
                                    }
                                    else if (keyValuePair.Value.GetType() == typeof(Int64[]))
                                    {
                                        Int64[] integer = new Int64[2];
                                        integer = (Int64[])keyValuePair.Value;
                                        criteria.Add(Expression.Between(keyValuePair.Key, integer[0], integer[1]));
                                        // criteria.Add(Expression.Eq(keyValuePair.Key, keyValuePair.Value));
                                    }
                                }
                            }
                        }
                        ICriteria countCriteria = (ICriteria)criteria.Clone();
                        long count = Convert.ToInt64(countCriteria.SetProjection(Projections.RowCountInt64()).List()[0]);
                        if (sortType != null && sortBy != null && sortType.Length != 0 && sortBy.Length != 0)
                        {
                            if (sortType == sType) criteria.AddOrder(Order.Asc(sortBy));
                            else criteria.AddOrder(Order.Desc(sortBy));
                        }

                        //var count = criteria.FutureValue<int>();
                        if (page != 0 && page != null)
                        {
                            criteria.SetFirstResult((int)(page * pageSize));
                        }
                        if (pageSize != 0 && pageSize != null)
                            criteria.SetMaxResults((int)pageSize);
                        else criteria.SetMaxResults(20);
                        IList<T> matchingObjects = criteria.List<T>();
                        if (criteria != null) criteria = null;
                        ListWithCount.Add(count, matchingObjects);
                        //ListWithCount.count = criteria.List().Count;
                        return ListWithCount;
                    }
                }
            }
            catch (Exception)
            {

                throw;
            }

        }
        /// <summary>
        /// Gets the list with search criteria with count for type T.
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="page">The page.</param>
        /// <param name="pageSize">Size of the page.</param>
        /// <param name="sortType">Type of the sort.</param>
        /// <param name="sortBy">The sort by.</param>
        /// <param name="searchCriteria">The search criteria.</param>
        /// <returns></returns>
        public Dictionary<long, IList<T>> GetListWithSearchCriteriaCount<T>(int? page, int? pageSize, string sortType, string sortBy, Dictionary<string, object> searchCriteria)
        {
            try
            {
                Dictionary<long, IList<T>> ListWithCount = new Dictionary<long, IList<T>>();

                using (ISession session = sessionFactory.OpenSession())
                {
                    using (session.BeginTransaction())
                    {
                        // Create a criteria object with the specified criteria
                        ICriteria criteria = session.CreateCriteria(typeof(T));
                        if (searchCriteria != null)
                        {
                            if (searchCriteria.Count > 0)
                            {

                                foreach (KeyValuePair<string, object> keyValuePair in searchCriteria.Where(x => x.Value != null))
                                {
                                    if (keyValuePair.Value.GetType() == typeof(string))
                                    {
                                        criteria.Add(Expression.Like(keyValuePair.Key.ToString(), sPercentage + keyValuePair.Value + sPercentage).IgnoreCase());
                                    }
                                    else if (keyValuePair.Value.GetType() == typeof(string[]))
                                    {
                                        string[] arr = ((IEnumerable)keyValuePair.Value).Cast<object>().Select(x => x.ToString()).ToArray();
                                        if (arr != null && arr.Length > 0)
                                            criteria.Add(Expression.In(keyValuePair.Key.ToString(), arr));
                                        //criteria.Add(Expression.InsensitiveLikee(keyValuePair.Ky.ToString(), sPercentage + keyValuePair.Value.ToString().Trim() + sPercentage));
                                    }
                                    else if (keyValuePair.Value.GetType().IsPrimitive)
                                    {
                                        criteria.Add(Expression.Eq(keyValuePair.Key, keyValuePair.Value));
                                    }
                                    else if (keyValuePair.Value.GetType() == typeof(DateTime))
                                    {
                                        criteria.Add(Expression.Eq(keyValuePair.Key, keyValuePair.Value));
                                    }
                                    else if (keyValuePair.Value.GetType() == typeof(DateTime[]))
                                    {
                                        DateTime[] datetime = new DateTime[2];
                                        datetime = (DateTime[])keyValuePair.Value;
                                        criteria.Add(Expression.Between(keyValuePair.Key, datetime[0], datetime[1]));
                                    }
                                    else if (keyValuePair.Value.GetType() == typeof(Int64[]))
                                    {
                                        criteria.Add(Expression.In(keyValuePair.Key, (Int64[])keyValuePair.Value));
                                    }
                                }
                            }
                        }
                        ICriteria countCriteria = (ICriteria)criteria.Clone();
                        long count = Convert.ToInt64(countCriteria.SetProjection(Projections.RowCountInt64()).List()[0]);
                        //var count = criteria.FutureValue<int>();

                        if (sortType != null && sortBy != null && sortType.Length != 0 && sortBy.Length != 0)
                        {
                            if (sortType == sType) criteria.AddOrder(Order.Asc(sortBy));
                            else criteria.AddOrder(Order.Desc(sortBy));
                        }
                        if (page != 0 && page != null)
                        {
                            criteria.SetFirstResult((int)(page * pageSize));
                        }
                        if (pageSize != 0 && pageSize != null)
                            criteria.SetMaxResults((int)pageSize);
                        else criteria.SetMaxResults(20);
                        IList<T> matchingObjects = criteria.List<T>();
                        if (criteria != null) criteria = null;
                        ListWithCount.Add(count, matchingObjects);
                        //ListWithCount.count = criteria.List().Count;
                        return ListWithCount;
                    }
                }
            }
            catch (Exception)
            {

                throw;
            }

        }
        public Dictionary<long, IList<T>> GetListWithSearchCriteriaCountWithEqProperty<T>(int? page, int? pageSize, string sortType, string sortBy, Dictionary<string, object> searchCriteria, string ColumnName, string[] values)
        {
            try
            {
                Dictionary<long, IList<T>> ListWithCount = new Dictionary<long, IList<T>>();

                using (ISession session = sessionFactory.OpenSession())
                {
                    using (session.BeginTransaction())
                    {
                        // Create a criteria object with the specified criteria
                        ICriteria criteria = session.CreateCriteria(typeof(T));
                        if (searchCriteria != null)
                        {
                            if (searchCriteria.Count > 0)
                            {
                                foreach (KeyValuePair<string, object> keyValuePair in searchCriteria.Where(x => x.Value != null))
                                {
                                    if (keyValuePair.Value.GetType() == typeof(string))
                                    {
                                        criteria.Add(Expression.Like(keyValuePair.Key.ToString(), sPercentage + keyValuePair.Value + sPercentage).IgnoreCase());
                                    }
                                    else if (keyValuePair.Value.GetType().IsPrimitive)
                                    {
                                        criteria.Add(Expression.Eq(keyValuePair.Key, keyValuePair.Value));
                                    }
                                    else if (keyValuePair.Value.GetType() == typeof(DateTime))
                                    {
                                        criteria.Add(Expression.Eq(keyValuePair.Key, keyValuePair.Value));
                                    }
                                }
                            }
                        }
                        if (!string.IsNullOrEmpty(ColumnName) && values != null && values.Length > 0)
                        {
                            criteria.Add(Expression.In(ColumnName, values));
                        }
                        if (sortType != null && sortBy != null && sortType.Length != 0 && sortBy.Length != 0)
                        {
                            if (sortType == sType) criteria.AddOrder(Order.Asc(sortBy));
                            else criteria.AddOrder(Order.Desc(sortBy));
                        }
                        ICriteria countCriteria = (ICriteria)criteria.Clone();
                        long count = Convert.ToInt64(countCriteria.SetProjection(Projections.RowCountInt64()).List()[0]);
                        //var count = criteria.FutureValue<int>();
                        if (page != 0 && page != null)
                        {
                            criteria.SetFirstResult((int)(page * pageSize));
                        }
                        if (pageSize != 0 && pageSize != null)
                            criteria.SetMaxResults((int)pageSize);
                        else criteria.SetMaxResults(20);
                        IList<T> matchingObjects = criteria.List<T>();
                        if (criteria != null) criteria = null;
                        ListWithCount.Add(count, matchingObjects);
                        //ListWithCount.count = criteria.List().Count;
                        return ListWithCount;
                    }
                }
            }
            catch (Exception)
            {

                throw;
            }

        }
        public Dictionary<long, IList<T>> GetListWithSearchCriteriaCountWithNotEqProperty<T>(int? page, int? pageSize, string sortType, string sortBy, Dictionary<string, object> searchCriteria, string ColumnName, long?[] values)
        {
            try
            {
                Dictionary<long, IList<T>> ListWithCount = new Dictionary<long, IList<T>>();

                using (ISession session = sessionFactory.OpenSession())
                {
                    using (session.BeginTransaction())
                    {
                        // Create a criteria object with the specified criteria
                        ICriteria criteria = session.CreateCriteria(typeof(T));
                        if (searchCriteria != null)
                        {
                            if (searchCriteria.Count > 0)
                            {
                                //foreach (KeyValuePair<string, string> keyValuePair in searchCriteria)
                                //{
                                //    criteria.Add(Expression.Like(keyValuePair.Key.ToString(), sPercentage + keyValuePair.Value + sPercentage).IgnoreCase());
                                //}
                                foreach (KeyValuePair<string, object> keyValuePair in searchCriteria.Where(x => x.Value != null))
                                {
                                    if (keyValuePair.Value.GetType() == typeof(string))
                                    {
                                        criteria.Add(Expression.Like(keyValuePair.Key.ToString(), sPercentage + keyValuePair.Value + sPercentage).IgnoreCase());
                                    }
                                    else if (keyValuePair.Value.GetType().IsPrimitive)
                                    {
                                        criteria.Add(Expression.Eq(keyValuePair.Key, keyValuePair.Value));
                                    }
                                    else if (keyValuePair.Value.GetType() == typeof(DateTime))
                                    {
                                        criteria.Add(Expression.Eq(keyValuePair.Key, keyValuePair.Value));
                                    }
                                }
                            }
                            if (!string.IsNullOrEmpty(ColumnName) && values != null && values.Length > 0)
                            {
                                criteria.Add(Expression.Not(Expression.In(ColumnName, values)));
                            }
                        }
                        if (sortType != null && sortBy != null && sortType.Length != 0 && sortBy.Length != 0)
                        {
                            if (sortType == sType) criteria.AddOrder(Order.Asc(sortBy));
                            else criteria.AddOrder(Order.Desc(sortBy));
                        }
                        ICriteria countCriteria = (ICriteria)criteria.Clone();
                        long count = Convert.ToInt64(countCriteria.SetProjection(Projections.RowCountInt64()).List()[0]);
                        //var count = criteria.FutureValue<int>();
                        if (page != 0 && page != null)
                        {
                            criteria.SetFirstResult((int)(page * pageSize));
                        }
                        if (pageSize != 0 && pageSize != null)
                            criteria.SetMaxResults((int)pageSize);
                        else criteria.SetMaxResults(20);
                        IList<T> matchingObjects = criteria.List<T>();
                        if (criteria != null) criteria = null;
                        ListWithCount.Add(count, matchingObjects);
                        //ListWithCount.count = criteria.List().Count;
                        return ListWithCount;
                    }
                }
            }
            catch (Exception)
            {

                throw;
            }

        }
        //public Dictionary<long, IList<T>> GetListWithAdvanceSearchCriteriaCount<T>(int? page, int? pageSize, string sortType, string sortBy, Dictionary<string, object> searchCriteria,IList<DateTimeFilter> dateTimeFilter)
        //{
        //    try
        //    {
        //        Dictionary<long, IList<T>> ListWithCount = new Dictionary<long, IList<T>>();

        //        using (ISession session = sessionFactory.OpenSession())
        //        {
        //            using (session.BeginTransaction())
        //            {
        //                // Create a criteria object with the specified criteria
        //                ICriteria criteria = session.CreateCriteria(typeof(T));
        //                if (searchCriteria != null)
        //                {
        //                    if (searchCriteria.Count > 0)
        //                    {
        //                        //foreach (KeyValuePair<string, string> keyValuePair in searchCriteria)
        //                        //{
        //                        //    criteria.Add(Expression.Like(keyValuePair.Key.ToString(), sPercentage + keyValuePair.Value + sPercentage).IgnoreCase());
        //                        //}
        //                        foreach (KeyValuePair<string, object> keyValuePair in searchCriteria.Where(x => x.Value != null))
        //                        {
        //                            if (keyValuePair.Value.GetType() == typeof(string))
        //                            {
        //                                criteria.Add(Expression.Like(keyValuePair.Key.ToString(), sPercentage + keyValuePair.Value + sPercentage).IgnoreCase());
        //                            }
        //                            else if (keyValuePair.Value.GetType().IsPrimitive)
        //                            {
        //                                criteria.Add(Expression.Eq(keyValuePair.Key, keyValuePair.Value));
        //                            }
        //                            //else if (keyValuePair.Value.GetType() == typeof(DateTime))
        //                            //{
        //                            //    criteria.Add(Expression.Eq(keyValuePair.Key, keyValuePair.Value));
        //                            //}
        //                        }
        //                    }
        //                }
        //                if (dateTimeFilter != null)
        //                    foreach (DateTimeFilter item in dateTimeFilter)
        //                    {
        //                        criteria.Add(Expression.Between(item.Property, item.From, item.To));
        //                    }
        //                if (sortType != null && sortBy != null && sortType.Length != 0 && sortBy.Length != 0)
        //                {
        //                    if (sortType == sType) criteria.AddOrder(Order.Asc(sortBy));
        //                    else criteria.AddOrder(Order.Desc(sortBy));
        //                }
        //                ICriteria countCriteria = (ICriteria)criteria.Clone();
        //                long count = Convert.ToInt64(countCriteria.SetProjection(Projections.RowCountInt64()).List()[0]);
        //                //var count = criteria.FutureValue<int>();
        //                if (page != 0 && page != null)
        //                {
        //                    criteria.SetFirstResult((int)(page * pageSize));
        //                }
        //                if (pageSize != 0 && pageSize != null)
        //                    criteria.SetMaxResults((int)pageSize);
        //                else criteria.SetMaxResults(20);
        //                IList<T> matchingObjects = criteria.List<T>();
        //                if (criteria != null) criteria = null;
        //                ListWithCount.Add(count, matchingObjects);
        //                //ListWithCount.count = criteria.List().Count;
        //                return ListWithCount;
        //            }
        //        }
        //    }
        //    catch (Exception)
        //    {

        //        throw;
        //    }

        //}
        public Dictionary<long, IList<T>> GetListWithExactSearchCriteriaCount<T>(int? page, int? pageSize, string sortBy, string sortType, Dictionary<string, object> searchCriteria)
        {
            try
            {
                Dictionary<long, IList<T>> ListWithCount = new Dictionary<long, IList<T>>();

                using (ISession session = sessionFactory.OpenSession())
                {
                    using (session.BeginTransaction())
                    {
                        // Create a criteria object with the specified criteria
                        ICriteria criteria = session.CreateCriteria(typeof(T));
                        if (searchCriteria != null)
                        {
                            if (searchCriteria.Count > 0)
                            {

                                foreach (KeyValuePair<string, object> keyValuePair in searchCriteria.Where(x => x.Value != null))
                                {
                                    if (keyValuePair.Value.GetType() == typeof(string))
                                    {
                                        criteria.Add(Expression.Like(keyValuePair.Key.ToString(), sPercentage + keyValuePair.Value + sPercentage).IgnoreCase());
                                    }
                                    else if (keyValuePair.Value.GetType() == typeof(string[]))
                                    {
                                        string[] arr = ((IEnumerable)keyValuePair.Value).Cast<object>().Select(x => x.ToString()).ToArray();
                                        if (arr != null && arr.Length > 0)
                                            criteria.Add(Expression.In(keyValuePair.Key.ToString(), arr));
                                        //criteria.Add(Expression.InsensitiveLikee(keyValuePair.Ky.ToString(), sPercentage + keyValuePair.Value.ToString().Trim() + sPercentage));
                                    }
                                    else if (keyValuePair.Value.GetType().IsPrimitive)
                                    {
                                        criteria.Add(Expression.Eq(keyValuePair.Key, keyValuePair.Value));
                                    }
                                    else if (keyValuePair.Value.GetType() == typeof(DateTime))
                                    {
                                        criteria.Add(Expression.Eq(keyValuePair.Key, keyValuePair.Value));
                                    }
                                    else if (keyValuePair.Value.GetType() == typeof(DateTime[]))
                                    {
                                        DateTime[] datetime = new DateTime[2];
                                        datetime = (DateTime[])keyValuePair.Value;
                                        criteria.Add(Expression.Between(keyValuePair.Key, datetime[0], datetime[1]));
                                        // criteria.Add(Expression.Eq(keyValuePair.Key, keyValuePair.Value));
                                    }
                                    else if (keyValuePair.Value.GetType() == typeof(Int64[]))
                                    {
                                        Int64[] integer = new Int64[2];
                                        integer = (Int64[])keyValuePair.Value;
                                        criteria.Add(Expression.Between(keyValuePair.Key, integer[0], integer[1]));
                                        // criteria.Add(Expression.Eq(keyValuePair.Key, keyValuePair.Value));
                                    }
                                }
                            }
                        }
                        ICriteria countCriteria = (ICriteria)criteria.Clone();
                        long count = Convert.ToInt64(countCriteria.SetProjection(Projections.RowCountInt64()).List()[0]);
                        if (sortType != null && sortBy != null && sortType.Length != 0 && sortBy.Length != 0)
                        {
                            if (sortType == sType) criteria.AddOrder(Order.Asc(sortBy));
                            else criteria.AddOrder(Order.Desc(sortBy));
                        }

                        //var count = criteria.FutureValue<int>();
                        if (page != 0 && page != null)
                        {
                            criteria.SetFirstResult((int)(page * pageSize));
                        }
                        if (pageSize != 0 && pageSize != null)
                            criteria.SetMaxResults((int)pageSize);
                        else criteria.SetMaxResults(20);
                        IList<T> matchingObjects = criteria.List<T>();
                        if (criteria != null) criteria = null;
                        ListWithCount.Add(count, matchingObjects);
                        //ListWithCount.count = criteria.List().Count;
                        return ListWithCount;
                    }
                }
            }
            catch (Exception)
            {
                throw;
            }
        }

        public Dictionary<long, IList<T>> GetListWithEQSearchCriteriaCount<T>(int? page, int? pageSize, string sortType, string sortBy, Dictionary<string, object> searchCriteria)
        {
            try
            {
                Dictionary<long, IList<T>> ListWithCount = new Dictionary<long, IList<T>>();

                using (ISession session = sessionFactory.OpenSession())
                {
                    using (session.BeginTransaction())
                    {
                        // Create a criteria object with the specified criteria
                        ICriteria criteria = session.CreateCriteria(typeof(T));
                        if (searchCriteria != null)
                        {
                            if (searchCriteria.Count > 0)
                            {
                                foreach (KeyValuePair<string, object> keyValuePair in searchCriteria.Where(x => x.Value != null))
                                {
                                    if (keyValuePair.Value.GetType() == typeof(string))
                                    {
                                        criteria.Add(Expression.Eq(keyValuePair.Key.ToString(), keyValuePair.Value).IgnoreCase());
                                    }
                                    //Added by felix to search the decimal
                                    else if (keyValuePair.Value.GetType() == typeof(decimal))
                                    {
                                        criteria.Add(Expression.Eq(keyValuePair.Key.ToString(), keyValuePair.Value).IgnoreCase());
                                    }
                                    else if (keyValuePair.Value.GetType() == typeof(string[]))
                                    {
                                        string[] arr = ((IEnumerable)keyValuePair.Value).Cast<object>().Select(x => x.ToString()).ToArray();
                                        if (arr != null && arr.Length > 0)
                                            criteria.Add(Expression.In(keyValuePair.Key.ToString(), arr));
                                        //criteria.Add(Expression.InsensitiveLikee(keyValuePair.Ky.ToString(), sPercentage + keyValuePair.Value.ToString().Trim() + sPercentage));
                                    }
                                    else if (keyValuePair.Value.GetType().IsPrimitive)
                                    {
                                        criteria.Add(Expression.Eq(keyValuePair.Key, keyValuePair.Value));
                                    }
                                    else if (keyValuePair.Value.GetType() == typeof(DateTime))
                                    {
                                        criteria.Add(Expression.Eq(keyValuePair.Key, keyValuePair.Value));
                                    }
                                    else if (keyValuePair.Value.GetType() == typeof(DateTime[]))
                                    {
                                        DateTime[] datetime = new DateTime[2];
                                        datetime = (DateTime[])keyValuePair.Value;
                                        criteria.Add(Expression.Between(keyValuePair.Key, datetime[0], datetime[1]));
                                        // criteria.Add(Expression.Eq(keyValuePair.Key, keyValuePair.Value));
                                    }
                                    else if (keyValuePair.Value.GetType() == typeof(Int64[]))
                                    {
                                        Int64[] arr = ((IEnumerable)keyValuePair.Value).Cast<long>().Select(x => x).ToArray();
                                        if (arr != null && arr.Length > 0)
                                            criteria.Add(Expression.In(keyValuePair.Key.ToString(), arr));
                                    }
                                    //else if (keyValuePair.Value.GetType() == typeof(Int64[]))
                                    //{
                                    //    Int64[] integer = new Int64[2];
                                    //    integer = (Int64[])keyValuePair.Value;
                                    //    criteria.Add(Expression.Between(keyValuePair.Key, integer[0], integer[1]));
                                    //    // criteria.Add(Expression.Eq(keyValuePair.Key, keyValuePair.Value));
                                    //}
                                }
                            }
                        }
                        ICriteria countCriteria = (ICriteria)criteria.Clone();
                        long count = Convert.ToInt64(countCriteria.SetProjection(Projections.RowCountInt64()).List()[0]);
                        if (sortType != null && sortBy != null && sortType.Length != 0 && sortBy.Length != 0)
                        {
                            if (sortType == sType) criteria.AddOrder(Order.Asc(sortBy));
                            else criteria.AddOrder(Order.Desc(sortBy));
                        }

                        //var count = criteria.FutureValue<int>();
                        if (page != 0 && page != null)
                        {
                            criteria.SetFirstResult((int)(page * pageSize));
                        }
                        if (pageSize != 0 && pageSize != null)
                            criteria.SetMaxResults((int)pageSize);
                        else criteria.SetMaxResults(20);
                        IList<T> matchingObjects = criteria.List<T>();
                        if (criteria != null) criteria = null;
                        ListWithCount.Add(count, matchingObjects);
                        //ListWithCount.count = criteria.List().Count;
                        return ListWithCount;
                    }
                }
            }
            catch (Exception)
            {

                throw;
            }

        }
        /// <summary>
        /// Gets the list with search criteria and count.
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="page">The page.</param>
        /// <param name="pageSize">Size of the page.</param>
        /// <param name="sortType">Type of the sort.</param>
        /// <param name="sortBy">The sort by.</param>
        /// <param name="searchCriteria">The search criteria.</param>
        /// <returns></returns>
        public Dictionary<long, IList<T>> GetListWithSearchCriteriaCount<T>(int? page, int? pageSize, string sortType, string sortBy, Dictionary<string, string> searchCriteria)
        {
            try
            {
                Dictionary<long, IList<T>> ListWithCount = new Dictionary<long, IList<T>>();
                using (ISession session = sessionFactory.OpenSession())
                {
                    using (session.BeginTransaction())
                    {
                        // Create a criteria object with the specified criteria
                        ICriteria criteria = session.CreateCriteria(typeof(T));
                        if (searchCriteria != null)
                        {
                            if (searchCriteria.Count > 0)
                            {
                                foreach (KeyValuePair<string, string> keyValuePair in searchCriteria)
                                {
                                    criteria.Add(Expression.Like(keyValuePair.Key.ToString(), sPercentage + keyValuePair.Value + sPercentage).IgnoreCase());
                                }
                            }
                        }
                        ICriteria countCriteria = (ICriteria)criteria.Clone();
                        long count = Convert.ToInt64(countCriteria.SetProjection(Projections.RowCountInt64()).List()[0]);

                        if (sortType != null && sortBy != null && sortType.Length != 0 && sortBy.Length != 0)
                        {
                            if (sortType == sType) criteria.AddOrder(Order.Asc(sortBy));
                            else criteria.AddOrder(Order.Desc(sortBy));
                        }

                        //var count = criteria.FutureValue<int>();
                        if (page != 0 && page != null)
                        {
                            criteria.SetFirstResult((int)(page * pageSize));
                        }
                        if (pageSize != 0 && pageSize != null)
                            criteria.SetMaxResults((int)pageSize);
                        else criteria.SetMaxResults(20);
                        IList<T> matchingObjects = criteria.List<T>();
                        if (criteria != null) criteria = null;
                        ListWithCount.Add(count, matchingObjects);
                        //ListWithCount.count = criteria.List().Count;
                        return ListWithCount;
                    }
                }
            }
            catch (Exception)
            {

                throw;
            }

        }
        /// <summary>
        /// Gets the list with search(Exact match for more than one) criteria with count.
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="page">The page.</param>
        /// <param name="pageSize">Size of the page.</param>
        /// <param name="sortType">Type of the sort.</param>
        /// <param name="sortBy">The sort by.</param>
        /// <param name="searchCriteria">The search criteria.</param>
        /// <param name="criteriaAlias">The criteria alias.</param>
        /// <returns></returns>
        public Dictionary<long, IList<T>> GetListWithSearchCriteriaCountArray<T>(int? page, int? pageSize, string sortBy, string sortType, string name, string[] values, Dictionary<string, object> searchCriteria, string[] criteriaAlias)
        {
            try
            {
                Dictionary<long, IList<T>> ListWithCount = new Dictionary<long, IList<T>>();

                using (ISession session = sessionFactory.OpenSession())
                {
                    using (session.BeginTransaction())
                    {
                        // Create a criteria object with the specified criteria
                        ICriteria criteria = session.CreateCriteria(typeof(T));
                        if (criteriaAlias != null && criteriaAlias.Length > 0)
                        {
                            foreach (string strAlias in criteriaAlias)
                            {
                                criteria.CreateAlias(strAlias, strAlias);
                            }
                        }
                        if (!(string.IsNullOrEmpty(name)) && values.Length > 0)
                        {
                            criteria.Add(Expression.In(name, values));
                        }
                        if (searchCriteria != null)
                        {
                            if (searchCriteria.Count > 0)
                            {
                                foreach (KeyValuePair<string, object> keyValuePair in searchCriteria.Where(x => x.Value != null))
                                {
                                    if (keyValuePair.Value.GetType() == typeof(string))
                                    {
                                        criteria.Add(Expression.InsensitiveLike(keyValuePair.Key.ToString(), sPercentage + keyValuePair.Value.ToString().Trim() + sPercentage));
                                        // criteria.Add(Expression.InsensitiveLike(keyValuePair.Key.ToString(),  keyValuePair.Value.ToString().Trim()));
                                    }
                                    else if (keyValuePair.Value.GetType() == typeof(string[]))
                                    {
                                        string[] arr = ((IEnumerable)keyValuePair.Value).Cast<object>().Select(x => x.ToString()).ToArray();
                                        if (arr != null && arr.Length > 0)
                                            criteria.Add(Expression.In(keyValuePair.Key.ToString(), arr));
                                        //criteria.Add(Expression.InsensitiveLikee(keyValuePair.Ky.ToString(), sPercentage + keyValuePair.Value.ToString().Trim() + sPercentage));
                                    }

                                    else if (keyValuePair.Value.GetType().IsPrimitive)
                                    {
                                        criteria.Add(Expression.Eq(keyValuePair.Key, keyValuePair.Value));
                                    }
                                    else if (keyValuePair.Value.GetType() == typeof(DateTime))
                                    {
                                        criteria.Add(Expression.InsensitiveLike(keyValuePair.Key, keyValuePair.Value));
                                    }
                                    else if (keyValuePair.Value.GetType() == typeof(DateTime[]))
                                    {
                                        DateTime[] datetime = new DateTime[2];
                                        datetime = (DateTime[])keyValuePair.Value;
                                        criteria.Add(Expression.Between(keyValuePair.Key, datetime[0], datetime[1]));
                                    }
                                    else if (keyValuePair.Value.GetType() == typeof(Int64[]))
                                    {
                                        Int64[] arr = ((IEnumerable)keyValuePair.Value).Cast<long>().Select(x => x).ToArray();
                                        if (arr != null && arr.Length > 0)
                                            criteria.Add(Expression.In(keyValuePair.Key.ToString(), arr));
                                    }
                                }
                            }
                        }
                        ICriteria countCriteria = (ICriteria)criteria.Clone();
                        long count = Convert.ToInt64(countCriteria.SetProjection(Projections.RowCountInt64()).List()[0]);
                        if (sortType != null && sortBy != null && sortType.Length != 0 && sortBy.Length != 0)
                        {
                            if (sortType == sType) criteria.AddOrder(Order.Asc(sortBy));
                            else criteria.AddOrder(Order.Desc(sortBy));
                        }

                        //var count = criteria.FutureValue<int>();
                        if (page != 0 && page != null)
                        {
                            criteria.SetFirstResult((int)(page * pageSize));
                        }
                        if (pageSize != 0 && pageSize != null)
                            criteria.SetMaxResults((int)pageSize);
                        else criteria.SetMaxResults(20);
                        IList<T> matchingObjects = criteria.List<T>();
                        if (criteria != null) criteria = null;
                        if (count > 0 && matchingObjects.Count > 0)
                            ListWithCount.Add(count, matchingObjects);
                        //ListWithCount.count = criteria.List().Count;
                        return ListWithCount;
                    }
                }
            }
            catch (Exception)
            {

                throw;
            }
        }

        //public Dictionary<long, IList<T>> GetListWithDateTimeSearchCriteriaAlias<T>(int? page, int? pageSize, string sortType, string sortBy, string name, string[] values, Dictionary<string, object> searchCriteria, string[] criteriaAlias, DateTimeSearch dateTimeSearch)
        //{
        //    try
        //    {
        //        Dictionary<long, IList<T>> ListWithCount = new Dictionary<long, IList<T>>();

        //        using (ISession session = sessionFactory.OpenSession())
        //        {
        //            using (session.BeginTransaction())
        //            {
        //                // Create a criteria object with the specified criteria
        //                ICriteria criteria = session.CreateCriteria(typeof(T));
        //                if (criteriaAlias.Length > 0)
        //                {
        //                    foreach (string strAlias in criteriaAlias)
        //                    {
        //                        criteria.CreateAlias(strAlias, strAlias);
        //                    }
        //                }
        //                if (!(string.IsNullOrEmpty(name)) && values.Length > 0)
        //                {
        //                    criteria.Add(Expression.In(name, values));
        //                }
        //                if (searchCriteria != null)
        //                {
        //                    if (searchCriteria.Count > 0)
        //                    {
        //                        foreach (KeyValuePair<string, object> keyValuePair in searchCriteria.Where(x => x.Value != null))
        //                        {
        //                            if (keyValuePair.Value.GetType() == typeof(string))
        //                            {
        //                                criteria.Add(Expression.InsensitiveLike(keyValuePair.Key.ToString(), sPercentage + keyValuePair.Value.ToString().Trim() + sPercentage));
        //                            }
        //                            else if (keyValuePair.Value.GetType().IsPrimitive)
        //                            {
        //                                criteria.Add(Expression.InsensitiveLike(keyValuePair.Key, keyValuePair.Value));
        //                            }
        //                            else if (keyValuePair.Value.GetType() == typeof(DateTime))
        //                            {
        //                                criteria.Add(Expression.InsensitiveLike(keyValuePair.Key, keyValuePair.Value));

        //                                //DateTime startDate = DateTime.Now;
        //                                //DateTime endDate = DateTime.Today;
        //                                //criteria.Add(Expression.Between("TimeStamp", startDate, endDate)); //
        //                            }
        //                        }
        //                    }
        //                }
        //                if (sortType != null && sortBy != null && sortType.Length != 0 && sortBy.Length != 0)
        //                {
        //                    if (sortType == sType) criteria.AddOrder(Order.Asc(sortBy));
        //                    else criteria.AddOrder(Order.Desc(sortBy));
        //                }
        //                ICriteria countCriteria = (ICriteria)criteria.Clone();
        //                long count = Convert.ToInt64(countCriteria.SetProjection(Projections.RowCountInt64()).List()[0]);
        //                //var count = criteria.FutureValue<int>();
        //                if (page != 0 && page != null)
        //                {
        //                    criteria.SetFirstResult((int)(page * pageSize));
        //                }
        //                if (pageSize != 0 && pageSize != null)
        //                    criteria.SetMaxResults((int)pageSize);
        //                else criteria.SetMaxResults(20);
        //                IList<T> matchingObjects = criteria.List<T>();
        //                if (criteria != null) criteria = null;
        //                if (count > 0 && matchingObjects.Count > 0)
        //                    ListWithCount.Add(count, matchingObjects);
        //                //ListWithCount.count = criteria.List().Count;
        //                return ListWithCount;
        //            }
        //        }
        //    }
        //    catch (Exception)
        //    {

        //        throw;
        //    }
        //}
        /// <summary>
        /// Gets the list with search criteria count.
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="page">The page.</param>
        /// <param name="pageSize">Size of the page.</param>
        /// <param name="sortType">Type of the sort.</param>
        /// <param name="sortBy">The sort by.</param>
        /// <param name="searchCriteria">The search criteria.</param>
        /// <param name="criteriaAlias">The criteria alias.</param>
        /// <returns></returns>
        //public Dictionary<long, IList<T>> GetListWithSearchCriteriaCount<T>(int? page, int? pageSize, string sortType, string sortBy, Dictionary<string, object> searchCriteria, string[] criteriaAlias)
        //{
        //    try
        //    {
        //        Dictionary<long, IList<T>> ListWithCount = new Dictionary<long, IList<T>>();
        //        IList<T> test = new List<T>();

        //        using (ISession session = sessionFactory.OpenSession())
        //        {
        //            using (session.BeginTransaction())
        //            {
        //                // Create a criteria object with the specified criteria
        //                ICriteria criteria = session.CreateCriteria(typeof(T));
        //                if (criteriaAlias.Length > 0)
        //                {
        //                    foreach (string strAlias in criteriaAlias)
        //                    {
        //                        criteria.CreateAlias(strAlias, strAlias);
        //                    }
        //                }
        //                if (searchCriteria != null)
        //                {
        //                    if (searchCriteria.Count > 0)
        //                    {
        //                        foreach (KeyValuePair<string, object> keyValuePair in searchCriteria.Where(x => x.Value != null))
        //                        {
        //                            if (keyValuePair.Value.GetType() == typeof(string))
        //                            {
        //                                criteria.Add(Expression.Like(keyValuePair.Key.ToString(), sPercentage + keyValuePair.Value + sPercentage).IgnoreCase());
        //                            }
        //                            else if (keyValuePair.Value.GetType().IsPrimitive)
        //                            {
        //                                criteria.Add(Expression.Eq(keyValuePair.Key, keyValuePair.Value));
        //                            }
        //                            else if (keyValuePair.Value.GetType() == typeof(DateTime))
        //                            {
        //                                criteria.Add(Expression.Eq(keyValuePair.Key, keyValuePair.Value));
        //                            }
        //                        }
        //                    }
        //                }
        //                if (sortType != null && sortBy != null && sortType.Length != 0 && sortBy.Length != 0)
        //                {
        //                    if (sortType == sType) criteria.AddOrder(Order.Asc(sortBy));
        //                    else criteria.AddOrder(Order.Desc(sortBy));
        //                }
        //                ICriteria countCriteria = (ICriteria)criteria.Clone();
        //                long count = Convert.ToInt64(countCriteria.SetProjection(Projections.RowCountInt64()).List()[0]);
        //                //var count = criteria.FutureValue<int>();
        //                if (page != 0 && page != null)
        //                {
        //                    criteria.SetFirstResult((int)(page * pageSize));
        //                }
        //                if (pageSize != 0 && pageSize != null)
        //                    criteria.SetMaxResults((int)pageSize);
        //                else criteria.SetMaxResults(20);
        //                IList<T> matchingObjects = criteria.List<T>();
        //                if (criteria != null) criteria = null;
        //                ListWithCount.Add(count, matchingObjects);
        //                //ListWithCount.count = criteria.List().Count;
        //                return ListWithCount;
        //            }
        //        }
        //    }
        //    catch (Exception)
        //    {

        //        throw;
        //    }
        //}

        public Dictionary<long, IList<T>> GetListWithSearchCriteriaCount<T>(int? page, int? pageSize, string sortType, string sortBy, Dictionary<string, object> searchCriteria, string[] criteriaAlias)
        {
            try
            {
                Dictionary<long, IList<T>> ListWithCount = new Dictionary<long, IList<T>>();
                IList<T> test = new List<T>();

                using (ISession session = sessionFactory.OpenSession())
                {
                    using (session.BeginTransaction())
                    {
                        // Create a criteria object with the specified criteria
                        ICriteria criteria = session.CreateCriteria(typeof(T));
                        if (criteriaAlias != null && criteriaAlias.Length > 0)
                        {
                            foreach (string strAlias in criteriaAlias)
                            {
                                criteria.CreateAlias(strAlias, strAlias);
                            }
                        }
                        if (searchCriteria != null)
                        {
                            if (searchCriteria.Count > 0)
                            {
                                foreach (KeyValuePair<string, object> keyValuePair in searchCriteria.Where(x => x.Value != null))
                                {
                                    if (keyValuePair.Value.GetType() == typeof(string))
                                    {
                                        criteria.Add(Expression.Like(keyValuePair.Key.ToString(), sPercentage + keyValuePair.Value + sPercentage).IgnoreCase());
                                    }
                                    else if (keyValuePair.Value.GetType().IsPrimitive)
                                    {
                                        criteria.Add(Expression.Eq(keyValuePair.Key, keyValuePair.Value));
                                    }
                                    else if (keyValuePair.Value.GetType() == typeof(DateTime))
                                    {
                                        criteria.Add(Expression.Eq(keyValuePair.Key, keyValuePair.Value));
                                    }
                                }
                            }
                        }

                        ICriteria countCriteria = (ICriteria)criteria.Clone();
                        long count = Convert.ToInt64(countCriteria.SetProjection(Projections.RowCountInt64()).List()[0]);
                        if (sortType != null && sortBy != null && sortType.Length != 0 && sortBy.Length != 0)
                        {
                            if (sortType == sType) criteria.AddOrder(Order.Asc(sortBy));
                            else criteria.AddOrder(Order.Desc(sortBy));
                        }
                        if (page != 0 && page != null)
                        {
                            criteria.SetFirstResult((int)(page * pageSize));
                        }
                        if (pageSize != 0 && pageSize != null)
                            criteria.SetMaxResults((int)pageSize);
                        else criteria.SetMaxResults(20);
                        IList<T> matchingObjects = criteria.List<T>();
                        if (criteria != null) criteria = null;
                        ListWithCount.Add(count, matchingObjects);
                        return ListWithCount;
                    }
                }
            }
            catch (Exception)
            {

                throw;
            }
        }
        /// <summary>
        /// 
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="sortType"></param>
        /// <param name="sortBy"></param>
        /// <param name="searchCriteria"></param>
        /// <param name="aliasArray"></param>
        /// <returns></returns>
        public IList<T> GetListWithSearchCriteria<T>(int? page, int? pageSize, string sortType, string sortBy, Dictionary<string, string> searchCriteria, string[] aliasArray)
        {
            try
            {
                using (ISession session = sessionFactory.OpenSession())
                {
                    using (session.BeginTransaction())
                    {
                        // Create a criteria object with the specified criteria
                        ICriteria criteria = session.CreateCriteria(typeof(T));

                        foreach (string strAlias in aliasArray)
                        {
                            criteria.CreateAlias(strAlias, strAlias);
                        }

                        if (searchCriteria != null)
                        {
                            if (searchCriteria.Count > 0)
                            {
                                foreach (KeyValuePair<string, string> keyValuePair in searchCriteria)
                                {
                                    criteria.Add(Expression.Like(keyValuePair.Key.ToString(), sPercentage + keyValuePair.Value + sPercentage).IgnoreCase());
                                }
                            }
                        }
                        if (sortType != null && sortBy != null && sortType.Length != 0 && sortBy.Length != 0)
                        {
                            if (sortType == sType) criteria.AddOrder(Order.Asc(sortBy));
                            else criteria.AddOrder(Order.Desc(sortBy));
                        }
                        if (page != 0 && page != null)
                        {
                            criteria.SetFirstResult((int)(page * pageSize));
                        }
                        if (pageSize != 0 && pageSize != null)
                            criteria.SetMaxResults((int)pageSize);
                        else criteria.SetMaxResults(20);
                        IList<T> matchingObjects = criteria.List<T>();

                        return matchingObjects;
                    }
                }
            }
            catch (Exception)
            {

                throw;
            }

        }
        /// <summary>
        /// 
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="sortType"></param>
        /// <param name="sortBy"></param>       
        /// <returns></returns>
        public IList<T> GetListWithPaging<T>(int? page, int? pageSize, string sortType, string sortBy)
        {
            try
            {
                using (ISession session = sessionFactory.OpenSession())
                {
                    using (session.BeginTransaction())
                    {
                        // Create a criteria object with the specified criteria
                        ICriteria criteria = session.CreateCriteria(typeof(T));

                        if (sortType != null && sortBy != null && sortType.Length != 0 && sortBy.Length != 0)
                        {
                            if (sortType == sType) criteria.AddOrder(Order.Asc(sortBy));
                            else criteria.AddOrder(Order.Desc(sortBy));
                        }
                        //var count = criteria.FutureValue<int>();
                        if (page != 0 && page != null)
                        {
                            criteria.SetFirstResult((int)(page * pageSize));
                        }
                        if (pageSize != 0 && pageSize != null)
                            criteria.SetMaxResults((int)pageSize);
                        else criteria.SetMaxResults(20);
                        IList<T> matchingObjects = criteria.List<T>();

                        if (criteria != null) criteria = null;
                        return matchingObjects;
                    }
                }
            }
            catch (Exception)
            {

                throw;
            }

        }
        /// <summary>
        /// 
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="sortType"></param>
        /// <param name="sortBy"></param>
        /// <param name="values"></param>
        /// <returns></returns>
        public IList<T> GetListWithPaging<T>(int? page, int? pageSize, string sortType, string sortBy, IDictionary<string, long> values)
        {
            try
            {
                using (ISession session = sessionFactory.OpenSession())
                {
                    using (session.BeginTransaction())
                    {
                        // Create a criteria object with the specified criteria
                        ICriteria criteria = session.CreateCriteria(typeof(T));
                        if (values != null && values.Count > 0)
                        {
                            //if (values.Count > 0)
                            //{
                            foreach (KeyValuePair<string, long> keyValuePair in values)
                            {
                                criteria.Add(Expression.Eq(keyValuePair.Key.ToString(), keyValuePair.Value));
                            }
                            //}
                        }
                        if (sortType != null && sortBy != null && sortType.Length != 0 && sortBy.Length != 0)
                        {
                            if (sortType == sType) criteria.AddOrder(Order.Asc(sortBy));
                            else criteria.AddOrder(Order.Desc(sortBy));
                        }
                        if (page != 0 && page != null)
                        {
                            criteria.SetFirstResult((int)(page * pageSize));
                        }
                        if (pageSize != 0 && pageSize != null)
                            criteria.SetMaxResults((int)pageSize);
                        else criteria.SetMaxResults(20);
                        IList<T> matchingObjects = criteria.List<T>();

                        return matchingObjects;
                    }
                }
            }
            catch (Exception) { throw; }
        }

        /// <summary>
        /// To Get all the Records of Type T
        /// </summary>
        /// <typeparam name="T">Type of object</typeparam>
        /// <param name="name">name of the attribute for filter</param>
        /// <param name="value">long value to be filtered</param>
        /// <returns></returns>
        public IList<T> GetList<T>(string name, Int64 value)
        {
            using (ISession session = sessionFactory.OpenSession())
            {
                using (session.BeginTransaction())
                {
                    ICriteria _criteriaGroup = session.CreateCriteria(typeof(T));
                    //_criteriaGroup.Add(Expression.Like(name, value));
                    _criteriaGroup.Add(Restrictions.InsensitiveLike(name, value));
                    IList<T> itemList = _criteriaGroup.List<T>();
                    return itemList;
                }
            }
        }
        public IList<T> GetList<T>(string firstCriteria, long fcValue, string secondCriteria, int scValue)
        {
            try
            {
                using (ISession session = sessionFactory.OpenSession())
                {
                    using (session.BeginTransaction())
                    {
                        ICriteria _criteriaGroup = session.CreateCriteria(typeof(T));
                        _criteriaGroup.Add(Expression.Eq(firstCriteria, fcValue));
                        _criteriaGroup.Add(Expression.Eq(secondCriteria, scValue));
                        IList<T> itemList = _criteriaGroup.List<T>();
                        return itemList;
                    }
                }
            }
            catch (Exception) { throw; }
        }
        public IList<T> GetList<T>(string firstCriteria, long fcValue, string secondCriteria, long scValue)
        {
            try
            {
                using (ISession session = sessionFactory.OpenSession())
                {
                    using (session.BeginTransaction())
                    {
                        ICriteria _criteriaGroup = session.CreateCriteria(typeof(T));
                        _criteriaGroup.Add(Expression.Eq(firstCriteria, fcValue));
                        _criteriaGroup.Add(Expression.Eq(secondCriteria, scValue));
                        IList<T> itemList = _criteriaGroup.List<T>();
                        return itemList;
                    }
                }
            }
            catch (Exception) { throw; }
        }

        public IList<T> GetList<T>(string firstCriteria, long fcValue, string secondCriteria, string scValue)
        {
            try
            {
                using (ISession session = sessionFactory.OpenSession())
                {
                    using (session.BeginTransaction())
                    {
                        ICriteria _criteriaGroup = session.CreateCriteria(typeof(T));
                        _criteriaGroup.Add(Expression.Eq(firstCriteria, fcValue));
                        _criteriaGroup.Add(Expression.Eq(secondCriteria, scValue));
                        IList<T> itemList = _criteriaGroup.List<T>();
                        return itemList;
                    }
                }
            }
            catch (Exception) { throw; }
        }

        public IList<T> GetList<T>(string name, bool value)
        {
            using (ISession session = sessionFactory.OpenSession())
            {
                using (session.BeginTransaction())
                {
                    ICriteria _criteriaGroup = session.CreateCriteria(typeof(T));
                    //_criteriaGroup.Add(Expression.Like(name, value));
                    _criteriaGroup.Add(Expression.Eq(name, value));
                    IList<T> itemList = _criteriaGroup.List<T>();
                    return itemList;
                }
            }
        }
        /// <summary>
        /// 
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="name"></param>
        /// <param name="value"></param>
        /// <returns></returns>
        public IList<T> GetListById<T>(string name, Int64 value)
        {
            using (ISession session = sessionFactory.OpenSession())
            {
                using (session.BeginTransaction())
                {
                    ICriteria _criteriaGroup = session.CreateCriteria(typeof(T));
                    _criteriaGroup.Add(Expression.Eq(name, value));
                    IList<T> itemList = _criteriaGroup.List<T>();
                    return itemList;
                }
            }
        }
        public IList<T> GetListById<T>(string name, Int64[] value)
        {
            using (ISession session = sessionFactory.OpenSession())
            {
                using (session.BeginTransaction())
                {
                    ICriteria _criteriaGroup = session.CreateCriteria(typeof(T));
                    _criteriaGroup.Add(Expression.In(name, value));
                    IList<T> itemList = _criteriaGroup.List<T>();
                    return itemList;
                }
            }
        }
        public IList<T> GetListWithPaggingandAdvanceSerach<T>(IDictionary<string, string> firstSearchCriteria, IDictionary<string, int> secondSearchCriteria, string[] strAliasArray, int? page, int? pageSize, string sortType, string sortBy)
        {
            try
            {
                using (ISession session = sessionFactory.OpenSession())
                {
                    using (session.BeginTransaction())
                    {
                        // Create a criteria object with the specified criteria
                        ICriteria criteria = session.CreateCriteria(typeof(T));
                        foreach (string strAlias in strAliasArray)
                        {
                            if (strAlias != null)
                            {
                                criteria.CreateAlias(strAlias, strAlias);
                            }
                        }
                        if (firstSearchCriteria != null)
                        {
                            if (firstSearchCriteria.Count > 0)
                            {
                                foreach (KeyValuePair<string, string> keyValuePair in firstSearchCriteria)
                                {
                                    if (keyValuePair.Value.StartsWith("="))
                                    {
                                        criteria.Add(Expression.Eq(keyValuePair.Key.ToString(), keyValuePair.Value.Remove(0, 1)).IgnoreCase());

                                    }
                                    else if (keyValuePair.Value.StartsWith("%"))
                                    {
                                        criteria.Add(Expression.Like(keyValuePair.Key.ToString(), "%" + keyValuePair.Value.Remove(0, 1) + "%").IgnoreCase());
                                    }
                                }
                            }
                        }
                        if (secondSearchCriteria != null)
                        {
                            if (secondSearchCriteria.Count > 0)
                            {
                                foreach (KeyValuePair<string, int> keyValuePair in secondSearchCriteria)
                                {
                                    criteria.Add(Expression.Eq(keyValuePair.Key.ToString(), keyValuePair.Value).IgnoreCase());
                                }
                            }
                        }
                        if (sortType != null && sortBy != null && sortType.Length != 0 && sortBy.Length != 0)
                        {
                            if (sortType == sType) criteria.AddOrder(Order.Asc(sortBy));
                            else criteria.AddOrder(Order.Desc(sortBy));
                        }
                        if (page != 0)
                        {
                            criteria.SetFirstResult((int)(page * pageSize));
                        }
                        if (pageSize != 0)
                            criteria.SetMaxResults((int)pageSize);
                        else criteria.SetMaxResults(20);
                        IList<T> matchingObjects = criteria.List<T>();
                        //log4net.Config.XmlConfigurator.Configure();
                        return matchingObjects;
                    }
                }
            }
            catch (Exception) { throw; }
        }
        #region Security specific methods

        /// <summary>
        /// To Get all the Records of Type T
        /// </summary>
        /// <param name="name">Proeprry name to filter the criteria</param>
        /// <param name="value"> value of the column to filter</param>
        /// <returns>All the records will be returned as List</returns>
        public IList<T> GetList<T>(string name, string value)
        {
            try
            {
                using (ISession session = sessionFactory.OpenSession())
                {
                    using (session.BeginTransaction())
                    {
                        ICriteria _criteriaGroup = session.CreateCriteria(typeof(T));
                        //_criteriaGroup.Add(Expression.Like(name, value));
                        _criteriaGroup.Add(Restrictions.InsensitiveLike(name, value));
                        IList<T> itemList = _criteriaGroup.List<T>();
                        return itemList;
                    }
                }
            }
            catch (Exception) { throw; }
        }
        public IList<T> GetList<T>(int? page, int? pageSize, string sortType, string sortBy, string name, long[] value)
        {
            try
            {
                using (ISession session = sessionFactory.OpenSession())
                {
                    using (session.BeginTransaction())
                    {
                        ICriteria criteria = session.CreateCriteria(typeof(T));
                        if (value.Length > 0 && !string.IsNullOrEmpty(name))
                        {
                            criteria.Add(Restrictions.In(name, value));
                        }
                        if (sortType.Length != 0 && sortBy.Length != 0)
                        {
                            if (sortType == sType) criteria.AddOrder(Order.Asc(sortBy));
                            else criteria.AddOrder(Order.Desc(sortBy));
                        }
                        //var count = criteria.FutureValue<int>();
                        if (page != 0 && page != null)
                        {
                            criteria.SetFirstResult((int)(page * pageSize));
                        }
                        if (pageSize != 0 && pageSize != null)
                            criteria.SetMaxResults((int)pageSize);
                        else criteria.SetMaxResults(20);
                        IList<T> itemList = criteria.List<T>();
                        return itemList;
                    }
                }
            }
            catch (Exception) { throw; }
        }
        public IList<T> GetListForNotEqProperty<T>(int? page, int? pageSize, string sortType, string sortBy, string name, long[] value)
        {
            try
            {
                using (ISession session = sessionFactory.OpenSession())
                {
                    using (session.BeginTransaction())
                    {
                        ICriteria criteria = session.CreateCriteria(typeof(T));
                        if (value != null && value.Length > 0 && !string.IsNullOrEmpty(name))
                        {
                            criteria.Add(Expression.Not(Expression.In(name, value)));
                        }
                        if (sortType.Length != 0 && sortBy.Length != 0)
                        {
                            if (sortType == sType) criteria.AddOrder(Order.Asc(sortBy));
                            else criteria.AddOrder(Order.Desc(sortBy));
                        }
                        //var count = criteria.FutureValue<int>();
                        if (page != 0 && page != null)
                        {
                            criteria.SetFirstResult((int)(page * pageSize));
                        }
                        if (pageSize != 0 && pageSize != null)
                            criteria.SetMaxResults((int)pageSize);
                        else criteria.SetMaxResults(20);
                        IList<T> itemList = criteria.List<T>();
                        return itemList;
                    }
                }
            }
            catch (Exception) { throw; }
        }
        /// <summary>
        /// Gets the list.
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="page">The page.</param>
        /// <param name="pageSize">Size of the page.</param>
        /// <param name="sortType">Type of the sort.</param>
        /// <param name="sortBy">The sort by.</param>
        /// <param name="name">The name.</param>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        public IList<T> GetList<T>(int? page, int? pageSize, string sortType, string sortBy, string name, string[] values)
        {
            try
            {
                using (ISession session = sessionFactory.OpenSession())
                {
                    using (session.BeginTransaction())
                    {
                        ICriteria criteria = session.CreateCriteria(typeof(T));
                        if (values.Length > 0)
                        {
                            criteria.Add(Expression.In(name, values));
                        }
                        if (sortType.Length != 0 && sortBy.Length != 0)
                        {
                            if (sortType == sType) criteria.AddOrder(Order.Asc(sortBy));
                            else criteria.AddOrder(Order.Desc(sortBy));
                        }
                        //var count = criteria.FutureValue<int>();
                        if (page != 0 && page != null)
                        {
                            criteria.SetFirstResult((int)(page * pageSize));
                        }
                        if (pageSize != 0 && pageSize != null)
                            criteria.SetMaxResults((int)pageSize);
                        else criteria.SetMaxResults(20);
                        IList<T> itemList = criteria.List<T>();
                        return itemList;
                    }
                }
            }
            catch (Exception) { throw; }
        }
        /// <summary>
        /// 
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="name"></param>
        /// <param name="values"></param>
        /// <returns></returns>
        public IList<T> GetList<T>(string name, long[] values)
        {
            try
            {
                using (ISession session = sessionFactory.OpenSession())
                {
                    using (session.BeginTransaction())
                    {
                        ICriteria _criteriaGroup = session.CreateCriteria(typeof(T));
                        _criteriaGroup.Add(Expression.In(name, values));
                        IList<T> itemList = _criteriaGroup.List<T>();
                        return itemList;
                    }
                }
            }
            catch (Exception) { throw; }
        }
        /// <summary>
        /// To Get filtered Records of Type T
        /// </summary>
        /// <param name="name">Proeprry name to filter the criteria</param>
        /// <param name="value"> value of the column to filter</param>
        /// <returns>All the records will be returned as List</returns>
        public IList<T> GetFilteredList<T>(string name, string[] values)
        {
            try
            {
                using (ISession session = sessionFactory.OpenSession())
                {
                    using (session.BeginTransaction())
                    {
                        ICriteria _criteriaGroup = session.CreateCriteria(typeof(T));
                        _criteriaGroup.Add(Expression.In(name, values));
                        IList<T> itemList = _criteriaGroup.List<T>();
                        return itemList;
                    }
                }
            }
            catch (Exception) { throw; }
        }


        /// <summary>
        /// To Get filtered Records of Type T
        /// </summary>
        /// <param name="name">Proeprry name to filter the criteria</param>
        /// <param name="value"> value of the column to filter</param>
        /// <returns>All the records will be returned as List</returns>
        public IList<T> GetFilteredList<T>(string param, string paramValue, string name, string[] values, string aliasCriteria)
        {
            try
            {
                using (ISession session = sessionFactory.OpenSession())
                {
                    using (session.BeginTransaction())
                    {
                        ICriteria _criteriaGroup = session.CreateCriteria(typeof(T));
                        foreach (string criteriaalias in aliasCriteria.Split(','))
                        {
                            _criteriaGroup.CreateAlias(criteriaalias, criteriaalias);
                        }
                        _criteriaGroup.Add(Expression.Eq(param, paramValue));
                        _criteriaGroup.Add(Expression.In(name, values));
                        IList<T> itemList = _criteriaGroup.List<T>();
                        return itemList;
                    }
                }
            }
            catch (Exception) { throw; }
        }
        /// <summary>
        /// To Get all the Records of Type T
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="firstCriteria"></param>
        /// <param name="fcValue"></param>
        /// <param name="secondCriteria"></param>
        /// <param name="scValue"></param>
        /// <returns></returns>
        public IList<T> GetList<T>(string firstCriteria, int fcValue, string secondCriteria, string scValue)
        {
            try
            {
                using (ISession session = sessionFactory.OpenSession())
                {
                    using (session.BeginTransaction())
                    {
                        ICriteria _criteriaGroup = session.CreateCriteria(typeof(T));
                        _criteriaGroup.Add(Expression.Eq(firstCriteria, fcValue));
                        _criteriaGroup.Add(Expression.Eq(secondCriteria, scValue));
                        IList<T> itemList = _criteriaGroup.List<T>();
                        return itemList;
                    }
                }
            }
            catch (Exception) { throw; }
        }

        /// <summary>
        /// To Get all the Records of Type T
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="firstCriteria"></param>
        /// <param name="fcValue"></param>
        /// <param name="Criterias"></param>       
        /// <returns></returns>
        public IList<T> GetList<T>(string firstCriteria, int fcValue, string[] Criterias)
        {
            try
            {
                using (ISession session = sessionFactory.OpenSession())
                {
                    using (session.BeginTransaction())
                    {
                        ICriteria _criteriaGroup = session.CreateCriteria(typeof(T));
                        _criteriaGroup.Add(Expression.Eq(firstCriteria, fcValue));

                        foreach (string paramValue in Criterias)
                        {
                            _criteriaGroup.Add(Restrictions.InsensitiveLike(paramValue.Split(',')[0], paramValue.Split(',')[1] + "%"));
                        }
                        IList<T> itemList = _criteriaGroup.List<T>();
                        return itemList;
                    }
                }
            }
            catch (Exception) { throw; }
        }


        /// <summary>
        /// To Get all the Records of Type T
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="firstCriteria"></param>
        /// <param name="fcValue"></param>
        /// <param name="secondCriteria"></param>
        /// <param name="scValue"></param>
        /// <returns></returns>
        public IList<T> GetList<T>(string firstCriteria, int fcValue, string secondCriteria, int scValue)
        {
            try
            {
                using (ISession session = sessionFactory.OpenSession())
                {
                    using (session.BeginTransaction())
                    {
                        ICriteria _criteriaGroup = session.CreateCriteria(typeof(T));
                        _criteriaGroup.Add(Expression.Eq(firstCriteria, fcValue));
                        _criteriaGroup.Add(Expression.Eq(secondCriteria, scValue));
                        IList<T> itemList = _criteriaGroup.List<T>();
                        return itemList;
                    }
                }
            }
            catch (Exception) { throw; }
        }

        /// <summary>
        /// To Get all the Records of Type T
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="firstCriteria"></param>
        /// <param name="fcValue"></param>
        /// <param name="secondCriteria"></param>
        /// <param name="scValue"></param>
        /// <returns></returns>
        public IList<T> GetList<T>(string firstCriteria, string fcValue, string secondCriteria, string scValue)
        {
            try
            {
                using (ISession session = sessionFactory.OpenSession())
                {
                    using (session.BeginTransaction())
                    {
                        ICriteria _criteriaGroup = session.CreateCriteria(typeof(T));
                        _criteriaGroup.Add(Restrictions.InsensitiveLike(firstCriteria, fcValue + "%"));
                        _criteriaGroup.Add(Restrictions.InsensitiveLike(secondCriteria, scValue + "%"));
                        IList<T> itemList = _criteriaGroup.List<T>();
                        return itemList;
                    }
                }
            }
            catch (Exception) { throw; }
        }
        /// <summary>
        /// To Get all the Records of Type T based on Serach Criteria 
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="Criteria"></param>
        /// <param name="aliasCriteria"></param>
        /// <returns></returns>
        public IList<T> GetSearchList<T>(string[] Criteria, string aliasCriteria)
        {
            try
            {
                using (ISession session = sessionFactory.OpenSession())
                {
                    using (session.BeginTransaction())
                    {
                        ICriteria _criteriaGroup = session.CreateCriteria(typeof(T));
                        foreach (string criteriaalias in aliasCriteria.Split(','))
                        {
                            _criteriaGroup.CreateAlias(criteriaalias, criteriaalias);
                        }

                        foreach (string _criteria in Criteria)
                        {
                            //_criteriaGroup.Add(Expression.Like(_criteria.Split(':')[0], _criteria.Split(':')[1] + "%"));
                            _criteriaGroup.Add(Restrictions.InsensitiveLike(_criteria.Split(':')[0], _criteria.Split(':')[1] + "%"));
                        }
                        IList<T> itemList = _criteriaGroup.List<T>();
                        return itemList;
                    }
                }
            }
            catch (Exception) { throw; }
        }
        /// <summary>
        /// To Get all the Records of Type T
        /// </summary>
        /// <param name="name">Proeprry name to filter the criteria</param>
        /// <param name="value"> value of the column to filter</param>
        /// <returns>All the records will be returned as List</returns>
        public IList<T> GetList<T>(string name, int value)
        {
            using (ISession session = sessionFactory.OpenSession())
            {
                using (session.BeginTransaction())
                {
                    ICriteria _criteriaGroup = session.CreateCriteria(typeof(T));
                    //_criteriaGroup.Add(Expression.Like(name, value));
                    _criteriaGroup.Add(Restrictions.InsensitiveLike(name, value));
                    IList<T> itemList = _criteriaGroup.List<T>();
                    return itemList;
                }
            }
        }

        #endregion
        #region GetShipping
        /// <summary>
        /// 
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="hashtable"></param>
        /// <param name="aliasArray"></param>
        /// <returns></returns>
        public IList<T> GetListWithCriteria<T>(Hashtable hashtable, string[] aliasArray)
        {
            try
            {
                using (ISession session = sessionFactory.OpenSession())
                {
                    using (session.BeginTransaction())
                    {
                        // Create a criteria object with the specified criteria
                        ICriteria criteria = session.CreateCriteria(typeof(T));

                        foreach (string strAlias in aliasArray)
                        { criteria.CreateAlias(strAlias, strAlias); }

                        foreach (DictionaryEntry dicEntry in hashtable)
                        {
                            if (dicEntry.Value != null)
                                criteria.Add(Expression.Eq(dicEntry.Key.ToString(), dicEntry.Value));
                            else
                                criteria.Add(Expression.IsNull(dicEntry.Key.ToString()));
                        }

                        criteria.SetResultTransformer(new NHibernate.Transform.DistinctRootEntityResultTransformer());
                        IList<T> matchingObjects = criteria.SetMaxResults(30).List<T>();


                        return matchingObjects;
                    }
                }
            }
            catch (Exception)
            {

                throw;
            }

        }
        #endregion
        #region GetListByName
        /// <summary>
        /// 
        /// </summary>
        /// <param name="query"></param>
        /// <returns></returns>
        public IList GetListByName(string query)
        {
            try
            {
                using (ISession session = sessionFactory.OpenSession())
                {

                    IQuery iquery = session.CreateQuery(query);
                    // Retrieve all objects of the type passed in
                    IList iList = iquery.List();

                    // Set return value
                    return iList;
                }
            }
            catch (Exception)
            {
                throw;
            }
        }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="SqlQuery"></param>
        /// <returns></returns>
        /// 

        //public Dictionary<long, IList<T>> ExecuteSql<T>(string SqlQuery)
        //{
        //    try
        //    {
        //        using (ISession session = sessionFactory.OpenSession())
        //        {
        //            ISQLQuery iquery = session.CreateSQLQuery(SqlQuery);
        //            // Retrieve all objects of the type passed in
        //          //  IList iList = iquery.List();
        //           Dictionary<long,IList<T>> test=  iquery;

        //            // Set return value
        //            return iquery.List()
        //        }
        //    }
        //    catch (Exception)
        //    {
        //        throw;
        //    }
        //}
        public IList ExecuteSql(string SqlQuery)
        {
            try
            {
                using (ISession session = sessionFactory.OpenSession())
                {
                    ISQLQuery iquery = session.CreateSQLQuery(SqlQuery);
                    // Retrieve all objects of the type passed in
                    IList iList = iquery.List();
                    // Set return value
                    return iList;
                }
            }
            catch (Exception)
            {
                throw;
            }
        }
        public IList<T> ExecuteSql<T>(string SqlQuery)
        {
            try
            {
                using (ISession session = sessionFactory.OpenSession())
                {
                    ISQLQuery iquery = session.CreateSQLQuery(SqlQuery);
                    // Retrieve all objects of the type passed in
                    IList<T> iList = iquery.List<T>();
                    // Set return value
                    return iList;
                }

            }
            catch (Exception)
            {
                throw;
            }
        }

        //public DataTable ExecuteSqlUsingSQLCommand(string SqlQuery)
        //{
        //    DataTable dt = new DataTable();
        //    try
        //    {
        //        using (ISession session = sessionFactory.OpenSession())
        //        {

        //            // Get the NHibernate Session (this line will change depending how you do it)
        //            //NHibernate.ISession session = SessionManager.GetInstance();
        //            // Create a SQL Command
        //            System.Data.IDbCommand command = session.Connection.CreateCommand();
        //            // Set the query you're going to run
        //            command.CommandText = SqlQuery;
        //            // Run the query
        //            command.ExecuteNonQuery();

        //            if (session.Transaction != null && session.Transaction.IsActive)
        //                session.Transaction.Enlist(command);
        //            using (IDataReader rdr = command.ExecuteReader())
        //            {
        //                DataRow row;
        //                while (rdr.Read())
        //                {
        //                    row = dt.NewRow();
        //                    for (int i = 0; i < rdr.FieldCount; i++) row[i] = rdr.IsDBNull(i) ? "" : rdr.GetString(i);
        //                    dt.Rows.Add(row);
        //                }
        //            }
        //        }
        //    }
        //    catch (Exception)
        //    {
        //        throw;
        //    }
        //    return dt;
        //}

        public DataTable ExecuteSqlUsingSQLCommand(string SqlQuery)
        {
            DataTable dt = new DataTable();
            try
            {
                using (ISession session = sessionFactory.OpenSession())
                {

                    System.Data.IDbCommand command = session.Connection.CreateCommand();
                    // Set the query you're going to run
                    command.CommandText = SqlQuery;
                    DataRow row;
                    IDataReader dr = command.ExecuteReader();
                    for (int i = 0; i < dr.FieldCount; i++) dt.Columns.Add(dr.GetName(i).ToString());
                    while (dr.Read())
                    {
                        row = dt.NewRow();
                        for (int i = 0; i < dr.FieldCount; i++) row[i] = dr[i];
                        dt.Rows.Add(row);
                    }
                }
            }
            catch (Exception)
            {
                throw;
            }
            return dt;
        }

        public DataSet ExecuteSqlUsingSQLCommand(string[] SqlQuery)
        {
            DataSet ds = new DataSet();
            try
            {
                using (ISession session = sessionFactory.OpenSession())
                {

                    System.Data.IDbCommand command = session.Connection.CreateCommand();
                    foreach (string s in SqlQuery)
                    {
                        DataTable dt = new DataTable();
                        // Set the query you're going to run
                        command.CommandText = s;
                        DataRow row;
                        IDataReader dr = command.ExecuteReader();
                        for (int i = 0; i < dr.FieldCount; i++) dt.Columns.Add(dr.GetName(i).ToString());
                        while (dr.Read())
                        {
                            row = dt.NewRow();
                            for (int i = 0; i < dr.FieldCount; i++) row[i] = dr[i];
                            dt.Rows.Add(row);
                        }
                        ds.Tables.Add(dt);
                    }
                }
            }
            catch (Exception)
            {
                throw;
            }
            return ds;
        }
        public IList<string> ExecuteSql1(string SqlQuery)
        {
            try
            {
                using (ISession session = sessionFactory.OpenSession())
                {

                    ISQLQuery iquery = session.CreateSQLQuery(SqlQuery);
                    // Retrieve all objects of the type passed in
                    IList<string> iList = iquery.List<string>();

                    // Set return value
                    return iList;
                }
            }
            catch (Exception)
            {
                throw;
            }
        }
        public IList ExecuteSql(string SqlQuery, ISession session)
        {
            try
            {
                ISQLQuery iquery = session.CreateSQLQuery(SqlQuery);
                // Retrieve all objects of the type passed in
                IList iList = iquery.List();

                // Set return value
                return iList;
            }
            catch (Exception)
            {
                throw;
            }
        }
        public IList<T> ExecuteSP<T>(string para1)
        {
            try
            {
                using (ISession session = sessionFactory.OpenSession())
                {
                    IQuery query = session.GetNamedQuery("CHECKUSEDCONSID");
                    query.SetString("ConsId", para1);
                    query.SetResultTransformer(new NHibernate.Transform.AliasToBeanConstructorResultTransformer(typeof(T).GetConstructors()[0]));
                    return query.List<T>() as List<T>;

                    var list = session.CreateSQLQuery("EXEC CHECKUSEDCONSID ?").SetString(0, "para1").List();
                    IQuery searchQuery = session.GetNamedQuery("CHECKUSEDCONSID");
                    if (!string.IsNullOrEmpty(para1))
                        searchQuery.SetString("ConsId", para1);
                    else
                        searchQuery.SetString("ConsId", null);
                    IList foundStaff = searchQuery.List();
                    //return foundStaff;
                }
            }
            catch (Exception)
            {
                throw;
            }
        }
        public Dictionary<long, IList<T>> GetListWithSearchCriteriaCountWithNotEqualProperty<T>(int? page, int? pageSize, string sortType, string sortBy, Dictionary<string, object> searchCriteria, string ColumnName, string[] values)
        {
            try
            {
                Dictionary<long, IList<T>> ListWithCount = new Dictionary<long, IList<T>>();

                using (ISession session = sessionFactory.OpenSession())
                {
                    using (session.BeginTransaction())
                    {
                        // Create a criteria object with the specified criteria
                        ICriteria criteria = session.CreateCriteria(typeof(T));
                        if (searchCriteria != null)
                        {
                            if (searchCriteria.Count > 0)
                            {
                                foreach (KeyValuePair<string, object> keyValuePair in searchCriteria.Where(x => x.Value != null))
                                {
                                    if (keyValuePair.Value.GetType() == typeof(string))
                                    {
                                        criteria.Add(Expression.Not(Expression.Like(keyValuePair.Key.ToString(), sPercentage + keyValuePair.Value + sPercentage).IgnoreCase()));
                                        // criteria.Add(Expression.NotEqProperty(keyValuePair.Key.ToString(),  keyValuePair.Value.ToString()));
                                    }
                                    else if (keyValuePair.Value.GetType().IsPrimitive)
                                    {
                                        criteria.Add(Expression.Not(Expression.Eq(keyValuePair.Key, keyValuePair.Value)));
                                    }
                                    else if (keyValuePair.Value.GetType() == typeof(DateTime))
                                    {
                                        criteria.Add(Expression.Not(Expression.Eq(keyValuePair.Key, keyValuePair.Value)));
                                    }
                                }
                            }
                            if (!string.IsNullOrEmpty(ColumnName) && values != null && values.Length > 0)
                            {
                                criteria.Add(Expression.Not(Expression.In(ColumnName, values)));
                            }
                        }
                        if (sortType != null && sortBy != null && sortType.Length != 0 && sortBy.Length != 0)
                        {
                            if (sortType == sType) criteria.AddOrder(Order.Asc(sortBy));
                            else criteria.AddOrder(Order.Desc(sortBy));
                        }
                        ICriteria countCriteria = (ICriteria)criteria.Clone();
                        long count = Convert.ToInt64(countCriteria.SetProjection(Projections.RowCountInt64()).List()[0]);
                        //var count = criteria.FutureValue<int>();
                        if (page != 0 && page != null)
                        {
                            criteria.SetFirstResult((int)(page * pageSize));
                        }
                        if (pageSize != 0 && pageSize != null)
                            criteria.SetMaxResults((int)pageSize);
                        else criteria.SetMaxResults(20);
                        IList<T> matchingObjects = criteria.List<T>();
                        if (criteria != null) criteria = null;
                        ListWithCount.Add(count, matchingObjects);
                        //ListWithCount.count = criteria.List().Count;
                        return ListWithCount;
                    }
                }
            }
            catch (Exception)
            {
                throw;
            }
        }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="SqlQuery"></param>
        /// <returns></returns>
        public IList<T> Execute<T>(string SqlQuery)
        {
            try
            {
                using (ISession session = sessionFactory.OpenSession())
                {

                    ISQLQuery iquery = session.CreateSQLQuery(SqlQuery);//.CreateCriteria(typeof(T));
                    // Retrieve all objects of the type passed in
                    int i = iquery.ExecuteUpdate();
                    IList<T> iList = iquery.List<T>();

                    // Set return value
                    return iList;
                }
            }
            catch (Exception)
            {
                throw;
            }
        }
        #endregion
        /// <summary>
        /// To Execute the Update Query.
        /// </summary>
        /// <param name="Query"></param>
        /// <returns></returns>
        public int ExecuteUpdate(string Query)
        {
            int Result = 0;
            try
            {
                using (ISession session = sessionFactory.OpenSession())
                {
                    using (session.BeginTransaction())
                    {
                        IQuery iQuery = session.CreateQuery(Query);
                        Result = iQuery.ExecuteUpdate();
                        session.Transaction.Commit();
                    }
                }
            }
            catch (Exception) { throw; }
            return Result;
        }
        /// <summary>
        /// Getting the list of objects based on array of Request Ids
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="Ids"></param>
        /// <returns></returns>
        public IList<T> GetListByIds<T>(long[] Ids)
        {
            IList<T> listObjs = new List<T>();
            try
            {
                using (ISession session = sessionFactory.OpenSession())
                {
                    foreach (long Id in Ids)
                    {
                        listObjs.Add(session.Get<T>(Id));
                    }
                }
            }
            catch (Exception)
            {
                throw;
            }
            return listObjs;
        }

        /// <summary>
        /// Opens the session.
        /// </summary>
        /// <returns></returns>
        public ISession OpenSession()
        {
            ISession session = sessionFactory.OpenSession();
            return session;
        }
        /// <summary>
        /// Closes the session.
        /// </summary>
        /// <param name="session">The session.</param>
        public void CloseSession(ISession session)
        {
            if (session == null) return;

            else if (session.IsOpen)
            {
                session.Close();
                session.Dispose();
            }
        }

        #endregion
        public Dictionary<long, IList<T>> GetListWithLikeSearchCriteriaCount<T>(int? page, int? pageSize, string sortBy, string sortType, Dictionary<string, object> searchCriteria)
        {
            try
            {
                Dictionary<long, IList<T>> ListWithCount = new Dictionary<long, IList<T>>();

                using (ISession session = sessionFactory.OpenSession())
                {
                    using (session.BeginTransaction())
                    {
                        // Create a criteria object with the specified criteria
                        ICriteria criteria = session.CreateCriteria(typeof(T));
                        if (searchCriteria != null)
                        {
                            if (searchCriteria.Count > 0)
                            {

                                foreach (KeyValuePair<string, object> keyValuePair in searchCriteria.Where(x => x.Value != null))
                                {
                                    if (keyValuePair.Value.GetType() == typeof(string))
                                    {
                                        criteria.Add(Expression.Like(keyValuePair.Key.ToString(), sPercentage + keyValuePair.Value + sPercentage).IgnoreCase());
                                    }

                                    else if (keyValuePair.Value.GetType() == typeof(string[]))
                                    {
                                        string[] arr = ((IEnumerable)keyValuePair.Value).Cast<object>().Select(x => x.ToString()).ToArray();
                                        if (arr != null && arr.Length > 0)
                                            criteria.Add(Expression.In(keyValuePair.Key.ToString(), arr));
                                        //criteria.Add(Expression.InsensitiveLikee(keyValuePair.Ky.ToString(), sPercentage + keyValuePair.Value.ToString().Trim() + sPercentage));
                                    }
                                    else if (keyValuePair.Value.GetType().IsPrimitive)
                                    {
                                        criteria.Add(Expression.Eq(keyValuePair.Key, keyValuePair.Value));
                                    }
                                    else if (keyValuePair.Value.GetType() == typeof(DateTime))
                                    {
                                        criteria.Add(Expression.Eq(keyValuePair.Key, keyValuePair.Value));
                                    }
                                    else if (keyValuePair.Value.GetType() == typeof(DateTime[]))
                                    {
                                        DateTime[] datetime = new DateTime[2];
                                        datetime = (DateTime[])keyValuePair.Value;
                                        criteria.Add(Expression.Between(keyValuePair.Key, datetime[0], datetime[1]));
                                        // criteria.Add(Expression.Eq(keyValuePair.Key, keyValuePair.Value));
                                    }
                                    else if (keyValuePair.Value.GetType() == typeof(Int64[]))
                                    {
                                        Int64[] integer = new Int64[2];
                                        integer = (Int64[])keyValuePair.Value;
                                        criteria.Add(Expression.Between(keyValuePair.Key, integer[0], integer[1]));
                                        // criteria.Add(Expression.Eq(keyValuePair.Key, keyValuePair.Value));
                                    }
                                }
                            }
                        }
                        ICriteria countCriteria = (ICriteria)criteria.Clone();
                        long count = Convert.ToInt64(countCriteria.SetProjection(Projections.RowCountInt64()).List()[0]);
                        if (sortType != null && sortBy != null && sortType.Length != 0 && sortBy.Length != 0)
                        {
                            if (sortType == sType) criteria.AddOrder(Order.Asc(sortBy));
                            else criteria.AddOrder(Order.Desc(sortBy));
                        }

                        //var count = criteria.FutureValue<int>();
                        if (page != 0 && page != null)
                        {
                            criteria.SetFirstResult((int)(page * pageSize));
                        }
                        if (pageSize != 0 && pageSize != null)
                            criteria.SetMaxResults((int)pageSize);
                        else criteria.SetMaxResults(20);
                        IList<T> matchingObjects = criteria.List<T>();
                        if (criteria != null) criteria = null;
                        ListWithCount.Add(count, matchingObjects);
                        //ListWithCount.count = criteria.List().Count;
                        return ListWithCount;
                    }
                }
            }
            catch (Exception)
            {

                throw;
            }

        }

        public Dictionary<long, IList<T>> GetListWithSearchCriteriaCountArrayExactSearch<T>(int? page, int? pageSize, string sortBy, string sortType, string name, string[] values, Dictionary<string, object> searchCriteria, string[] criteriaAlias)
        {
            try
            {
                Dictionary<long, IList<T>> ListWithCount = new Dictionary<long, IList<T>>();

                using (ISession session = sessionFactory.OpenSession())
                {
                    using (session.BeginTransaction())
                    {
                        // Create a criteria object with the specified criteria
                        ICriteria criteria = session.CreateCriteria(typeof(T));
                        if (criteriaAlias != null && criteriaAlias.Length > 0)
                        {
                            foreach (string strAlias in criteriaAlias)
                            {
                                criteria.CreateAlias(strAlias, strAlias);
                            }
                        }
                        if (!(string.IsNullOrEmpty(name)) && values.Length > 0)
                        {
                            criteria.Add(Expression.In(name, values));
                        }
                        if (searchCriteria != null)
                        {
                            if (searchCriteria.Count > 0)
                            {
                                foreach (KeyValuePair<string, object> keyValuePair in searchCriteria.Where(x => x.Value != null))
                                {
                                    if (keyValuePair.Value.GetType() == typeof(string))
                                    {
                                        criteria.Add(Expression.Eq(keyValuePair.Key.ToString(), keyValuePair.Value));
                                        //  criteria.Add(Expression.InsensitiveLike(keyValuePair.Key.ToString(), keyValuePair.Value.ToString().Trim()));

                                    }
                                    else if (keyValuePair.Value.GetType() == typeof(string[]))
                                    {
                                        //added by JP on mar 26 2014 to check if array contains all null values, then no criteria will be created. This method only contains this code,
                                        //Anbu may add this in other required methods if necessary
                                        string[] arr = ((string[])keyValuePair.Value).Where(x => !string.IsNullOrEmpty(x)).ToArray();
                                        if (arr != null && arr.Count() > 0)
                                        {
                                            arr = ((IEnumerable)keyValuePair.Value).Cast<object>().Select(x => x.ToString()).ToArray();
                                            if (arr != null && arr.Length > 0)
                                                criteria.Add(Expression.In(keyValuePair.Key.ToString(), arr));
                                        }
                                    }
                                    else if (keyValuePair.Value.GetType().IsPrimitive)
                                    {
                                        criteria.Add(Expression.Eq(keyValuePair.Key, keyValuePair.Value));
                                    }
                                    else if (keyValuePair.Value.GetType() == typeof(DateTime))
                                    {
                                        criteria.Add(Expression.InsensitiveLike(keyValuePair.Key, keyValuePair.Value));
                                    }
                                    else if (keyValuePair.Value.GetType() == typeof(DateTime[]))
                                    {
                                        DateTime[] datetime = new DateTime[2];
                                        datetime = (DateTime[])keyValuePair.Value;
                                        criteria.Add(Expression.Between(keyValuePair.Key, datetime[0], datetime[1]));
                                    }
                                    else if (keyValuePair.Value.GetType() == typeof(Int64[]))
                                    {
                                        Int64[] arr = ((IEnumerable)keyValuePair.Value).Cast<long>().Select(x => x).ToArray();
                                        if (arr != null && arr.Length > 0)
                                            criteria.Add(Expression.In(keyValuePair.Key.ToString(), arr));
                                    }
                                }
                            }
                        }
                        ICriteria countCriteria = (ICriteria)criteria.Clone();
                        long count = Convert.ToInt64(countCriteria.SetProjection(Projections.RowCountInt64()).List()[0]);
                        if (sortType != null && sortBy != null && sortType.Length != 0 && sortBy.Length != 0)
                        {
                            if (sortType == sType) criteria.AddOrder(Order.Asc(sortBy));
                            else criteria.AddOrder(Order.Desc(sortBy));
                        }

                        //var count = criteria.FutureValue<int>();
                        if (page != 0 && page != null)
                        {
                            criteria.SetFirstResult((int)(page * pageSize));
                        }
                        if (pageSize != 0 && pageSize != null)
                            criteria.SetMaxResults((int)pageSize);
                        else criteria.SetMaxResults(20);
                        IList<T> matchingObjects = criteria.List<T>();
                        if (criteria != null) criteria = null;
                        if (count > 0 && matchingObjects.Count > 0)
                            ListWithCount.Add(count, matchingObjects);
                        //ListWithCount.count = criteria.List().Count;
                        return ListWithCount;
                    }
                }
            }
            catch (Exception)
            {

                throw;
            }
        }
        #region Helper Methods

        /// <summary>
        /// Closes the session
        /// </summary>
        private void CloseSession()
        {
            if (Session == null) return;

            else if (Session.IsOpen)
            {
                Session.Close();
                Session.Dispose();
            }
        }

        private void DisposeTransaction()
        {
            if (Transaction != null)
            {
                if (Transaction.IsActive)
                    Transaction.Dispose();
            }
        }

        #endregion

        #region IDisposable Members
        /// <summary>
        /// 
        /// </summary>
        /// <param name="disposing"></param>
        protected virtual void Dispose(bool disposing)
        {
            CloseSession();
            DisposeTransaction();
        }

        /// <summary>
        /// Method implementation for Dispose
        /// Implement IDisposable.
        /// Do not make this method virtual.
        /// A derived class should not be able to override this method
        /// </summary>
        public void Dispose()
        {
            Dispose(true);
            // This object will be cleaned up by the Dispose method.
            // Therefore, you should call GC.SupressFinalize to
            // take this object off the finalization queue 
            // and prevent finalization code for this object
            // from executing a second time.
            GC.SuppressFinalize(this);
        }

        #endregion

        public Dictionary<long, IList<T>> GetListWithExactSearchWithArrayCriteriaCount<T>(int? page, int? pageSize, string sortBy, string sortType, Dictionary<string, object> searchCriteria)
        {
            try
            {
                Dictionary<long, IList<T>> ListWithCount = new Dictionary<long, IList<T>>();

                using (ISession session = sessionFactory.OpenSession())
                {
                    using (session.BeginTransaction())
                    {
                        // Create a criteria object with the specified criteria
                        ICriteria criteria = session.CreateCriteria(typeof(T));
                        if (searchCriteria != null)
                        {
                            if (searchCriteria.Count > 0)
                            {

                                foreach (KeyValuePair<string, object> keyValuePair in searchCriteria.Where(x => x.Value != null))
                                {
                                    if (keyValuePair.Value.GetType() == typeof(string))
                                    {
                                        criteria.Add(Expression.Like(keyValuePair.Key.ToString(), sPercentage + keyValuePair.Value + sPercentage).IgnoreCase());
                                    }
                                    else if (keyValuePair.Value.GetType() == typeof(string[]))
                                    {
                                        string[] arr = ((IEnumerable)keyValuePair.Value).Cast<object>().Select(x => x.ToString()).ToArray();
                                        if (arr != null && arr.Length > 0)
                                            criteria.Add(Expression.In(keyValuePair.Key.ToString(), arr));
                                        //criteria.Add(Expression.InsensitiveLikee(keyValuePair.Ky.ToString(), sPercentage + keyValuePair.Value.ToString().Trim() + sPercentage));
                                    }
                                    else if (keyValuePair.Value.GetType().IsPrimitive)
                                    {
                                        criteria.Add(Expression.Eq(keyValuePair.Key, keyValuePair.Value));
                                    }
                                    else if (keyValuePair.Value.GetType() == typeof(DateTime))
                                    {
                                        criteria.Add(Expression.Eq(keyValuePair.Key, keyValuePair.Value));
                                    }
                                    else if (keyValuePair.Value.GetType() == typeof(DateTime[]))
                                    {
                                        DateTime[] datetime = new DateTime[2];
                                        datetime = (DateTime[])keyValuePair.Value;
                                        criteria.Add(Expression.Between(keyValuePair.Key, datetime[0], datetime[1]));
                                        // criteria.Add(Expression.Eq(keyValuePair.Key, keyValuePair.Value));
                                    }
                                    else if (keyValuePair.Value.GetType() == typeof(Int64[]))
                                    {
                                        //Int64[] integer = new Int64[2];
                                        //integer = (Int64[])keyValuePair.Value;
                                        //criteria.Add(Expression.Between(keyValuePair.Key, integer[0], integer[1]));
                                        //// criteria.Add(Expression.Eq(keyValuePair.Key, keyValuePair.Value));

                                        Int64[] arr = ((IEnumerable)keyValuePair.Value).Cast<long>().Select(x => x).ToArray();
                                        if (arr != null && arr.Length > 0)
                                            criteria.Add(Expression.In(keyValuePair.Key.ToString(), arr));
                                    }
                                }
                            }
                        }
                        ICriteria countCriteria = (ICriteria)criteria.Clone();
                        long count = Convert.ToInt64(countCriteria.SetProjection(Projections.RowCountInt64()).List()[0]);
                        if (sortType != null && sortBy != null && sortType.Length != 0 && sortBy.Length != 0)
                        {
                            if (sortType == sType) criteria.AddOrder(Order.Asc(sortBy));
                            else criteria.AddOrder(Order.Desc(sortBy));
                        }

                        //var count = criteria.FutureValue<int>();
                        if (page != 0 && page != null)
                        {
                            criteria.SetFirstResult((int)(page * pageSize));
                        }
                        if (pageSize != 0 && pageSize != null)
                            criteria.SetMaxResults((int)pageSize);
                        else criteria.SetMaxResults(20);
                        IList<T> matchingObjects = criteria.List<T>();
                        if (criteria != null) criteria = null;
                        ListWithCount.Add(count, matchingObjects);
                        //ListWithCount.count = criteria.List().Count;
                        return ListWithCount;
                    }
                }
            }
            catch (Exception)
            {
                throw;
            }
        }

        public Dictionary<long, IList<T>> GetListWithExactSearchCriteriaCountWithInCondition<T>(int? page, int? pageSize, string sortBy, string sortType, Dictionary<string, object> searchCriteria)
        {
            try
            {
                Dictionary<long, IList<T>> ListWithCount = new Dictionary<long, IList<T>>();

                using (ISession session = sessionFactory.OpenSession())
                {
                    using (session.BeginTransaction())
                    {
                        // Create a criteria object with the specified criteria
                        ICriteria criteria = session.CreateCriteria(typeof(T));
                        if (searchCriteria != null)
                        {
                            if (searchCriteria.Count > 0)
                            {

                                foreach (KeyValuePair<string, object> keyValuePair in searchCriteria.Where(x => x.Value != null))
                                {
                                    if (keyValuePair.Value.GetType() == typeof(string))
                                    {
                                        criteria.Add(Expression.Eq(keyValuePair.Key.ToString(), keyValuePair.Value));
                                        //  criteria.Add(Expression.InsensitiveLike(keyValuePair.Key.ToString(), keyValuePair.Value.ToString().Trim()));

                                    }
                                    else if (keyValuePair.Value.GetType() == typeof(string[]))
                                    {
                                        string[] arr = ((IEnumerable)keyValuePair.Value).Cast<object>().Select(x => x.ToString()).ToArray();
                                        if (arr != null && arr.Length > 0)
                                            criteria.Add(Expression.In(keyValuePair.Key.ToString(), arr));
                                        //criteria.Add(Expression.InsensitiveLikee(keyValuePair.Ky.ToString(), sPercentage + keyValuePair.Value.ToString().Trim() + sPercentage));
                                    }
                                    else if (keyValuePair.Value.GetType().IsPrimitive)
                                    {
                                        criteria.Add(Expression.Eq(keyValuePair.Key, keyValuePair.Value));
                                    }
                                    else if (keyValuePair.Value.GetType() == typeof(DateTime))
                                    {
                                        criteria.Add(Expression.Eq(keyValuePair.Key, keyValuePair.Value));
                                    }
                                    else if (keyValuePair.Value.GetType() == typeof(DateTime[]))
                                    {
                                        DateTime[] datetime = new DateTime[2];
                                        datetime = (DateTime[])keyValuePair.Value;
                                        criteria.Add(Expression.Between(keyValuePair.Key, datetime[0], datetime[1]));
                                        // criteria.Add(Expression.Eq(keyValuePair.Key, keyValuePair.Value));
                                    }
                                    else if (keyValuePair.Value.GetType() == typeof(Int64[]))
                                    {
                                        Int64[] arr = ((IEnumerable)keyValuePair.Value).Cast<long>().Select(x => x).ToArray();
                                        if (arr != null && arr.Length > 0)
                                            criteria.Add(Expression.In(keyValuePair.Key.ToString(), arr));
                                    }
                                }
                            }
                        }
                        ICriteria countCriteria = (ICriteria)criteria.Clone();
                        long count = Convert.ToInt64(countCriteria.SetProjection(Projections.RowCountInt64()).List()[0]);
                        if (sortType != null && sortBy != null && sortType.Length != 0 && sortBy.Length != 0)
                        {
                            if (sortType == sType) criteria.AddOrder(Order.Asc(sortBy));
                            else criteria.AddOrder(Order.Desc(sortBy));
                        }

                        //var count = criteria.FutureValue<int>();
                        if (page != 0 && page != null)
                        {
                            criteria.SetFirstResult((int)(page * pageSize));
                        }
                        if (pageSize != 0 && pageSize != null)
                            criteria.SetMaxResults((int)pageSize);
                        else criteria.SetMaxResults(20);
                        IList<T> matchingObjects = criteria.List<T>();
                        if (criteria != null) criteria = null;
                        ListWithCount.Add(count, matchingObjects);
                        //ListWithCount.count = criteria.List().Count;
                        return ListWithCount;
                    }
                }
            }
            catch (Exception)
            {
                throw;
            }
        }

        /// <summary>
        /// Written by felix
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="column1"></param>
        /// <param name="value1"></param>
        /// <param name="column2"></param>
        /// <param name="value2"></param>
        /// <returns></returns>
        ///
        public T Get<T>(string column1, long value1, string column2, string value2, string column3, string value3)
        {
            try
            {
                using (ISession session = sessionFactory.OpenSession())
                {
                    using (session.BeginTransaction())
                    {
                        ICriteria _criteriaGroup = session.CreateCriteria(typeof(T));
                        _criteriaGroup.Add(Restrictions.Eq(column1, value1));
                        _criteriaGroup.Add(Restrictions.Eq(column2, value2));
                        _criteriaGroup.Add(Restrictions.Eq(column3, value3));
                        T item = _criteriaGroup.List<T>().FirstOrDefault<T>();
                        return item;
                    }
                }
            }
            catch (Exception) { throw; }
        }

        //Get the counter values

        public IList GetCounterValue(string tablename)
        {
            try
            {
                using (ISession session = sessionFactory.OpenSession())
                {
                    using (session.BeginTransaction())
                    {
                        ISQLQuery iquery = session.CreateSQLQuery("Select CounterValue+IncrementBy CountVal From GCCCounter Where TableName='" + tablename + "'");
                        // Retrieve all objects of the type passed in
                        IList iList = iquery.List();

                        session.CreateQuery("Update GCCCounter SET CounterValue=CounterValue+IncrementBy Where TableName='" + tablename + "'")
                        .ExecuteUpdate();
                        session.Transaction.Commit();

                        // Set return value
                        return iList;
                    }
                }
            }
            catch (Exception)
            {
                throw;
            }
        }

        public Dictionary<long, IList<T>> GetListWithNotInWithEQSearchCriteriaCountArray<T>(int? page, int? pageSize, string sortBy, string sortType, string ColumName, int[] values, Dictionary<string, object> searchCriteria)
        {
            try
            {
                Dictionary<long, IList<T>> ListWithCount = new Dictionary<long, IList<T>>();

                using (ISession session = sessionFactory.OpenSession())
                {
                    using (session.BeginTransaction())
                    {
                        // Create a criteria object with the specified criteria
                        ICriteria criteria = session.CreateCriteria(typeof(T));
                        if (!(string.IsNullOrEmpty(ColumName)) && values.Length > 0)
                        {
                            criteria.Add(Expression.Not(Expression.In(ColumName, values)));
                        }
                        if (searchCriteria != null)
                        {
                            if (searchCriteria.Count > 0)
                            {
                                foreach (KeyValuePair<string, object> keyValuePair in searchCriteria.Where(x => x.Value != null))
                                {
                                    if (keyValuePair.Value.GetType() == typeof(string))
                                    {
                                        //criteria.Add(Expression.InsensitiveLike(keyValuePair.Key.ToString(), sPercentage + keyValuePair.Value.ToString().Trim() + sPercentage));
                                        criteria.Add(Expression.Eq(keyValuePair.Key.ToString(), keyValuePair.Value).IgnoreCase());
                                    }
                                    else if (keyValuePair.Value.GetType() == typeof(string[]))
                                    {
                                        string[] arr = ((IEnumerable)keyValuePair.Value).Cast<object>().Select(x => x.ToString()).ToArray();
                                        if (arr != null && arr.Length > 0)
                                            criteria.Add(Expression.In(keyValuePair.Key.ToString(), arr));
                                        //criteria.Add(Expression.InsensitiveLikee(keyValuePair.Ky.ToString(), sPercentage + keyValuePair.Value.ToString().Trim() + sPercentage));
                                    }
                                    else if (keyValuePair.Value.GetType().IsPrimitive)
                                    {
                                        criteria.Add(Expression.Eq(keyValuePair.Key, keyValuePair.Value));
                                    }
                                    else if (keyValuePair.Value.GetType() == typeof(DateTime))
                                    {
                                        criteria.Add(Expression.InsensitiveLike(keyValuePair.Key, keyValuePair.Value));
                                    }
                                    else if (keyValuePair.Value.GetType() == typeof(DateTime[]))
                                    {
                                        DateTime[] datetime = new DateTime[2];
                                        datetime = (DateTime[])keyValuePair.Value;
                                        criteria.Add(Expression.Between(keyValuePair.Key, datetime[0], datetime[1]));
                                    }
                                    else if (keyValuePair.Value.GetType() == typeof(Int64[]))
                                    {
                                        //Int64[] integer = new Int64[2];
                                        //integer = (Int64[])keyValuePair.Value;
                                        //criteria.Add(Expression.Between(keyValuePair.Key, integer[0], integer[1]));
                                        Int64[] arr = ((IEnumerable)keyValuePair.Value).Cast<long>().Select(x => x).ToArray();
                                        if (arr != null && arr.Length > 0)
                                            criteria.Add(Expression.Not(Expression.In(keyValuePair.Key.ToString(), arr)));
                                        //criteria.Add(Expression.In(keyValuePair.Key.ToString(), arr));
                                    }
                                }
                            }
                        }
                        ICriteria countCriteria = (ICriteria)criteria.Clone();
                        long count = Convert.ToInt64(countCriteria.SetProjection(Projections.RowCountInt64()).List()[0]);
                        if (sortType != null && sortBy != null && sortType.Length != 0 && sortBy.Length != 0)
                        {
                            if (sortType == sType) criteria.AddOrder(Order.Asc(sortBy));
                            else criteria.AddOrder(Order.Desc(sortBy));
                        }

                        //var count = criteria.FutureValue<int>();
                        if (page != 0 && page != null)
                        {
                            criteria.SetFirstResult((int)(page * pageSize));
                        }
                        if (pageSize != 0 && pageSize != null)
                            criteria.SetMaxResults((int)pageSize);
                        else criteria.SetMaxResults(20);
                        IList<T> matchingObjects = criteria.List<T>();
                        if (criteria != null) criteria = null;
                        if (count > 0 && matchingObjects.Count > 0)
                            ListWithCount.Add(count, matchingObjects);
                        //ListWithCount.count = criteria.List().Count;
                        return ListWithCount;
                    }
                }
            }
            catch (Exception ex)
            {

                throw ex;
            }
        }

        public Dictionary<long, IList<T>> GetListWithExactAndLikeSearchCriteriaWithCount<T>(int? page, int? pageSize, string sortType, string sortBy, Dictionary<string, object> exactSearchCriteria, Dictionary<string, object> likeSearchCriteria)
        {
            try
            {
                Dictionary<long, IList<T>> ListWithCount = new Dictionary<long, IList<T>>();

                using (ISession session = sessionFactory.OpenSession())
                {
                    using (session.BeginTransaction())
                    {
                        // Create a criteria object with the specified criteria
                        ICriteria criteria = session.CreateCriteria(typeof(T));
                        if (exactSearchCriteria != null)
                        {
                            if (exactSearchCriteria.Count > 0)
                            {

                                foreach (KeyValuePair<string, object> keyValuePair in exactSearchCriteria.Where(x => x.Value != null))
                                {
                                    if (keyValuePair.Value.GetType() == typeof(string))
                                    {
                                        criteria.Add(Expression.Eq(keyValuePair.Key.ToString(), keyValuePair.Value).IgnoreCase());
                                    }
                                    else if (keyValuePair.Value.GetType() == typeof(string[]))
                                    {
                                        string[] arr = ((IEnumerable)keyValuePair.Value).Cast<object>().Select(x => x.ToString()).ToArray();
                                        if (arr != null && arr.Length > 0)
                                            criteria.Add(Expression.In(keyValuePair.Key.ToString(), arr));
                                        //criteria.Add(Expression.InsensitiveLikee(keyValuePair.Ky.ToString(), sPercentage + keyValuePair.Value.ToString().Trim() + sPercentage));
                                    }
                                    else if (keyValuePair.Value.GetType().IsPrimitive)
                                    {
                                        criteria.Add(Expression.Eq(keyValuePair.Key, keyValuePair.Value));
                                    }
                                    else if (keyValuePair.Value.GetType() == typeof(DateTime))
                                    {
                                        criteria.Add(Expression.Eq(keyValuePair.Key, keyValuePair.Value));
                                    }
                                    else if (keyValuePair.Value.GetType() == typeof(DateTime[]))
                                    {
                                        DateTime[] datetime = new DateTime[2];
                                        datetime = (DateTime[])keyValuePair.Value;
                                        criteria.Add(Expression.Between(keyValuePair.Key, datetime[0], datetime[1]));
                                        // criteria.Add(Expression.Eq(keyValuePair.Key, keyValuePair.Value));
                                    }
                                    else if (keyValuePair.Value.GetType() == typeof(Int64[]))
                                    {
                                        Int64[] integer = new Int64[2];
                                        integer = (Int64[])keyValuePair.Value;
                                        criteria.Add(Expression.Between(keyValuePair.Key, integer[0], integer[1]));
                                        // criteria.Add(Expression.Eq(keyValuePair.Key, keyValuePair.Value));
                                    }
                                }
                            }
                        }
                        if (likeSearchCriteria != null)
                        {
                            if (likeSearchCriteria.Count > 0)
                            {

                                foreach (KeyValuePair<string, object> keyValuePair in likeSearchCriteria.Where(x => x.Value != null))
                                {
                                    if (keyValuePair.Value.GetType() == typeof(string))
                                    {
                                        criteria.Add(Expression.Like(keyValuePair.Key.ToString(), sPercentage + keyValuePair.Value + sPercentage).IgnoreCase());
                                    }
                                    else if (keyValuePair.Value.GetType() == typeof(string[]))
                                    {
                                        string[] arr = ((IEnumerable)keyValuePair.Value).Cast<object>().Select(x => x.ToString()).ToArray();
                                        if (arr != null && arr.Length > 0)
                                            criteria.Add(Expression.In(keyValuePair.Key.ToString(), arr));
                                        //criteria.Add(Expression.InsensitiveLikee(keyValuePair.Ky.ToString(), sPercentage + keyValuePair.Value.ToString().Trim() + sPercentage));
                                    }
                                    else if (keyValuePair.Value.GetType().IsPrimitive)
                                    {
                                        criteria.Add(Expression.Eq(keyValuePair.Key, keyValuePair.Value));
                                    }
                                    else if (keyValuePair.Value.GetType() == typeof(DateTime))
                                    {
                                        criteria.Add(Expression.Eq(keyValuePair.Key, keyValuePair.Value));
                                    }
                                    else if (keyValuePair.Value.GetType() == typeof(DateTime[]))
                                    {
                                        DateTime[] datetime = new DateTime[2];
                                        datetime = (DateTime[])keyValuePair.Value;
                                        criteria.Add(Expression.Between(keyValuePair.Key, datetime[0], datetime[1]));
                                        // criteria.Add(Expression.Eq(keyValuePair.Key, keyValuePair.Value));
                                    }
                                    else if (keyValuePair.Value.GetType() == typeof(Int64[]))
                                    {
                                        Int64[] integer = new Int64[2];
                                        integer = (Int64[])keyValuePair.Value;
                                        criteria.Add(Expression.Between(keyValuePair.Key, integer[0], integer[1]));
                                        // criteria.Add(Expression.Eq(keyValuePair.Key, keyValuePair.Value));
                                    }
                                }
                            }
                        }

                        ICriteria countCriteria = (ICriteria)criteria.Clone();
                        long count = Convert.ToInt64(countCriteria.SetProjection(Projections.RowCountInt64()).List()[0]);
                        if (sortType != null && sortBy != null && sortType.Length != 0 && sortBy.Length != 0)
                        {
                            if (sortType == sType) criteria.AddOrder(Order.Asc(sortBy));
                            else criteria.AddOrder(Order.Desc(sortBy));
                        }

                        //var count = criteria.FutureValue<int>();
                        if (page != 0 && page != null)
                        {
                            criteria.SetFirstResult((int)(page * pageSize));
                        }
                        if (pageSize != 0 && pageSize != null)
                            criteria.SetMaxResults((int)pageSize);
                        else criteria.SetMaxResults(20);
                        IList<T> matchingObjects = criteria.List<T>();
                        if (criteria != null) criteria = null;
                        ListWithCount.Add(count, matchingObjects);
                        //ListWithCount.count = criteria.List().Count;
                        return ListWithCount;
                    }
                }
            }
            catch (Exception)
            {
                throw;
            }
        }

        #region Stored Procedure
        public Dictionary<long, IList<T>> ExecuteStoredProcedureByDictonary<T>(string procedureName, IList<SqlParameter> parameters)
        {
            IEnumerable<T> result;
            IList<T> TempList;
            Dictionary<long, IList<T>> DicResult = new Dictionary<long, IList<T>>();

            using (ISession session = sessionFactory.OpenSession())
            {
                using (session.BeginTransaction())
                {
                    var query = session.GetNamedQuery(procedureName);
                    AddStoredProcedureParameters(query, parameters);
                    result = query.List<T>();
                    TempList = result.Take(result.Count()).ToList();
                    DicResult.Add(TempList.Count(), TempList);
                    //session.Transaction.Commit();
                }
            }
            return DicResult;
        }
        public IEnumerable<T> ExecuteStoredProcedure<T>(string procedureName, IList<SqlParameter> parameters)
        {
            IEnumerable<T> result;

            using (ISession session = sessionFactory.OpenSession())
            {
                using (session.BeginTransaction())
                {
                    var query = session.GetNamedQuery(procedureName);
                    AddStoredProcedureParameters(query, parameters);
                    result = query.List<T>();
                    //session.Transaction.Commit();
                }
            }
            return result;
        }
        public T ExecuteScalarStoredProcedure<T>(string procedureName, IList<SqlParameter> parameters)
        {
            T result;

            using (ISession session = sessionFactory.OpenSession())
            {
                using (session.BeginTransaction())
                {
                    var query = session.GetNamedQuery(procedureName);
                    AddStoredProcedureParameters(query, parameters);
                    result = query.SetResultTransformer(Transformers.AliasToBean(typeof(T))).UniqueResult<T>();
                    session.Transaction.Commit();
                }
            }
            return result;
        }
        public static IQuery AddStoredProcedureParameters(IQuery query, IEnumerable<SqlParameter> parameters)
        {
            foreach (var parameter in parameters)
            {
                query.SetParameter(parameter.ParameterName, parameter.Value);
            }
            return query;
        }
        #endregion
        //added by Thamizhmani
        public T Get<T>(string column1, long value1, string column2, long value2, string column3, long value3)
        {
            try
            {
                using (ISession session = sessionFactory.OpenSession())
                {
                    using (session.BeginTransaction())
                    {
                        ICriteria _criteriaGroup = session.CreateCriteria(typeof(T));
                        _criteriaGroup.Add(Restrictions.Eq(column1, value1));
                        _criteriaGroup.Add(Restrictions.Eq(column2, value2));
                        _criteriaGroup.Add(Restrictions.Eq(column3, value3));
                        T item = _criteriaGroup.List<T>().FirstOrDefault<T>();
                        return item;
                    }
                }
            }
            catch (Exception) { throw; }
        }

    }
}


