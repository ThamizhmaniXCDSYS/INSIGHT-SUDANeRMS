@{
    ViewBag.Title = "ImportDeliveryNote";
    Layout = "~/Views/Shared/NewMaster.cshtml";
}

<style>
    .ui-jqgrid tr.jqgrow td {
        font-size: 10px;
    }

    input[disabled], select[disabled], textarea[disabled], input[readonly], select[readonly], textarea[readonly] {
        cursor: default;
        background-color: #FFFFFF;
    }



    #dvLoading {
        /*background: url("../../../Images/Sun.gif") no-repeat center center;*/
        background: url("../Images/Sun.gif") no-repeat center center;
        height: 100%;
        width: 100%;
        position: fixed;
        z-index: 1000;
        left: 0%;
        top: 15%;
        margin: -25px 0 0 -25px;
    }

    .ui-dialog-content ui-widget-content {
        style ="width: 700px; min-height: 66px; height: 146px;" scrolltop="0" scrollleft="0";
    }
</style>
<script type="text/javascript">

    function GetOrdersList() {

        $('#dvLoading').hide() // hide it initially.
        .ajaxStart(function () {
            $(this).show(); // show on any Ajax event.
        })

         .ajaxStop(function () {
             $(this).hide(); // hide it when it is done.
         });

        function formateadorLink(cellvalue, options, rowObject) {
            return "<a href='@Url.Content("~/Orders/ImportedDeliveryNoteItems")?ImpDeliveryNoteId='" + rowObject[0] + ">" + cellvalue + "</a>";
        }

        $('#OrdersList').jqGrid('GridUnload');
        jQuery("#DeliveryNoteList").jqGrid({
            mtype: 'GET',
            url: '@Url.Content("~/Orders/ImportedDeliveryNoteListJQGrid")',
            datatype: 'json',
            height: '335',
            width: '1200',
            // width: $("#OrdersList").closest("fieldset").innerWidth() - 10,
            shrinkToFit: true,
            colNames: ['ImpDeliveryNoteId', 'Delivery Number', 'ControlId', 'Req No', 'Whouse', 'Str', 'DOS', 'MDays', 'ConsWeek', 'DelWeek', 'DelMode', 'SealNo', 'ShipmentDate', 'UNFoodOrder', 'UNWeek', 'Period', 'OrderId', 'Sector', 'Name', 'Location', 'Period','PeriodYear'],
            colModel: [
                        { name: 'ImpDeliveryNoteId', index: 'ImpDeliveryNoteId', key: true, hidden: true, editable: true },
                        { name: 'ImpDeliveryNoteName', index: 'ImpDeliveryNoteName', width: 150, formatter: formateadorLink, },
                        { name: 'ImpControlId', index: 'ImpControlId', search: false, width: 350 },
                        { name: 'ImpRequestNo', index: 'ImpRequestNo', search: false, width: 100 },
                        { name: 'ImpWarehouse', index: 'ImpWarehouse', search: false, width: 100 },
                        { name: 'ImpStrength', index: 'ImpStrength', search: false, width: 60 },
                        { name: 'ImpDOS', index: 'ImpDOS', search: false, width: 60 },
                        { name: 'ImpManDays', index: 'ImpManDays', search: false, width: 60 },
                        { name: 'ImpConsumptionWeek', index: 'ImpConsumptionWeek', search: false, width: 60 },
                        { name: 'ImpDeliveryWeek', index: 'ImpDeliveryWeek', search: false, width: 60 },
                        { name: 'ImpDeliveryMode', index: 'ImpDeliveryMode', search: false, width: 100 },
                        { name: 'ImpSealNo', index: 'ImpSealNo', search: false, hidden: true },
                        { name: 'ImpShipmentDate', index: 'ImpShipmentDate', search: false, width: 100 },
                        { name: 'ImpUNFoodOrder', index: 'ImpUNFoodOrder', hidden: true },
                        { name: 'ImpUNWeek', index: 'ImpUNWeek', width: 60 },
                        { name: 'ImpPeriod', index: 'ImpPeriod', editable: true, width: 100 },
                        { name: 'OrderId', index: 'OrderId', editable: true, hidden: true },
                        { name: 'Sector', index: 'Sector', hidden: true },
                        { name: 'Name', index: 'Name', hidden: true },
                        { name: 'Location', index: 'Location', editable: true, hidden: true },
                        { name: 'Period', index: 'Period', editable: true, hidden: true },
                        { name: 'PeriodYear', index: 'PeriodYear', editable: true, hidden: true }
                        //{ name: 'PeriodYear', index: 'PeriodYear', editable: true}
                         //{ name: 'Delete', index: 'Delete', align: 'center', width: 60, search: false,hidden:true }
            ],
            pager: '#DeliveryNoteListPager',
            rowNum: '100',
            rowList: [100, 200, 400, 1000],
            // rowList: [], // disable page size dropdown
            // pgbuttons: false, // disable page control like next, back button
            //pgtext: null, // disable pager text like 'Page 0 of 10'
            sortname: 'ImpDeliveryNoteName',
            sortorder: "Asc",
            viewrecords: true,
            caption: '&nbsp;<i class="icon-th-list"></i>&nbsp;Delivery Note List',
            gridComplete: function () {


                $('#jqgh_DeliveryNoteList_Delete').toggleClass('icon-white icon-trash');
            }

            // multiselect: true

        });
        //jQuery("#OrdersList").jqGrid('navGrid', '#OrdersListPager', { edit: false, add: false, del: false });

        $('#OrdersList').jqGrid('filterToolbar', { searchOnEnter: true, enableClear: false, afterSearch: function () { $('#OrdersList').clearGridData(); } });


    }

    $(function () {
        GetOrdersList();
        /*File Upload Related Start*/
        /* upload button code //Ajax File Uploading */
        function SpecialCharacters(strValidate) {
            if (strValidate.indexOf('&') != -1 || strValidate.indexOf("'") != -1 ||
                strValidate.indexOf(";") != -1 || strValidate.indexOf("#") != -1) {
                return true;
            } else {
                return false;
            }
        }

        function validateDocReq(msg, reqField, isValid) {
            var fieldVal = $('#' + reqField).val();
            if ((typeof isValid != 'undefined' && isValid) || fieldVal == null || fieldVal == "") {
                ErrMsg(msg, function () { $('#' + reqField).focus(); });
                return false;
            } else {
                return true;
            }
        }

        $('#btnUploadDoc').click(function () {
            var splitstr = $('#uploadedFile').val().split('\\');
            var fileName = splitstr[splitstr.length - 1];
            var DocTypeText = $('#doctype option:selected').text();
            if (!validateDocReq("No document found. Please select a file to upload!!!", 'uploadedFile')) { }
            else if (!validateDocReq("Special characters (&,#,;') are not supported in document file names. Please amend the file name before upload!!!", 'uploadedFile', SpecialCharacters(fileName))) { }
            else if (!validateDocReq("The attached file does not contain file extension.", 'uploadedFile', (fileName.lastIndexOf('.') == -1))) { }
            else {
                ajaxUploadDocs();
                return false;
            }
        });

        function ajaxUploadDocs() {
            // debugger;

            var DocTypeText = $('#doctype option:selected').text();
            $.ajaxFileUpload({
                url: 'ImportDeliveryNote',
                secureuri: false,
                fileElementId: 'uploadedFile',
                dataType: 'json',
                success: function (data, status) {
                    //debugger;
                    $('#OrdersList').trigger("reloadGrid");
                    $('#uploadedFile').val('');
                    if (typeof data.result != 'undefined' && data.result != '') {
                        if (typeof data.success != 'undefined' && data.success == true) {
                            //$("#textDialogBox").html("test<br/>test2");
                            InfoMsg(data.result);
                        } else {
                            ErrMsg(data.result);
                        }
                    }
                },
                error: function (data, status, e) {

                }
            });
        }
        /*File Upload Related End*/
    });
    $(function () {

        FillSector();
        FillContingent();
        FillPeriod();
        FillLocation();
        FillPeriodYear();
        $("#Sector").change(function () {
            FillContingent($(this).val());
        });
        $("#Contingent").change(function () {
            FillLocation($("#Sector").val(), $(this).val());
        });
        $("#btnPDF").click(function () {
            window.open('@Url.Content("~/PdfGeneration/InvoicePrint")?OrderId=' + 61, '_blank');
        });

        //        $("#btnInvoice").click(function () {
        //                window.location.href = '@Url.Action("NewInvoice", "Invoice")';
        //        });
    });

    function FillSector() {
        $.getJSON('@Url.Content("~/Masters/FillSectorbyUser/")',
    function (modelData) {
        var select = $("#Sector");
        select.empty();
        select.append($('<option/>',
    {
        value: "",
        text: "Select Sector"
    }));
        $.each(modelData, function (index, itemData) {

            select.append($('<option/>',
    {
        value: itemData.Value,
        text: itemData.Text
    }));
        });
    });
    }
    function FillContingent(SectorCode) {
        $.getJSON('@Url.Content("~/Masters/FillContingentbyUser/")?SectorCode=' + SectorCode,
    function (modelData) {
        var select = $("#Contingent");
        select.empty();
        select.append($('<option/>'
    , {
        value: "",
        text: "Select Contingent"
    }));
        $.each(modelData, function (index, itemData) {

            select.append($('<option/>',
    {
        value: itemData.Value,
        text: itemData.Text
    }));
        });
    });
    }

    function FillLocation(SectorCode, ContingentCode) {
        $.getJSON('@Url.Content("~/Masters/FillLocationbyUser/")?SectorCode=' + SectorCode + '&ContingentCode=' + ContingentCode,
    function (modelData) {
        var select = $("#Location");
        select.empty();
        select.append($('<option/>'
    , {
        value: "",
        text: "Select Location"
    }));
        $.each(modelData, function (index, itemData) {

            select.append($('<option/>',
    {
        value: itemData.Value,
        text: itemData.Text
    }));
        });
    });
    }

    function FillPeriod() {
        $.getJSON('@Url.Content("~/Masters/FillPeriod/")',
    function (modelData) {
        var select = $("#Period");
        select.empty();
        select.append($('<option/>'
    , {
        value: "",
        text: "Select Period"
    }));
        $.each(modelData, function (index, itemData) {

            select.append($('<option/>',
    {
        value: itemData.Value,
        text: itemData.Text
    }));
        });
    });
    }

    function OrdersSearch() {

        var Sector = $('#Sector').val();
        var Contingent = $('#Contingent').val();
        var ClientName = $('#Location').val();
        var Location = $('#Period').val();
        var searchItems = $('#Sector').val() + ',' + $('#Contingent').val() + ',' + $('#Location').val() + ',' + $('#Period').val() + ',' + $('#PeriodYear').val();


        $("#DeliveryNoteList").setGridParam(
            {
                datatype: "json",
                url: '@Url.Content("~/Orders/ImportedDeliveryNoteListJQGrid")?searchItems=' + searchItems,
                //postData: { ProjectCode: ProjectCode, ProjectType: ProjectType, ClientName: ClientName, City: City, ContactPerson: ContactPerson },
                page: 0
            }).trigger("reloadGrid");
    }


    function ResetOrderSearch() {
        $('#Sector').val(0);
        $('#Contingent').val(0);
        $('#contingentType').val("");
        $('#Period').val(0);
        $('#PeriodYear').val(0);
        $("#DeliveryNoteList").clearGridData();
    }
    //Deleting the importeddeliverynote

    function FillPeriodYear() {
        $.getJSON('@Url.Content("~/Masters/FillPeriodYear")',
    function (modelData) {
        var select = $("#PeriodYear");
        select.empty();
        select.append($('<option/>'
    , {
        value: "",
        text: "Select Year"
    }));
        $.each(modelData, function (index, itemData) {

            select.append($('<option/>',
    {
        value: itemData.Value,
        text: itemData.Text
    }));
        });
    });
    }


</script>
<div id="divDocuments">
    <table width="100%" style="border: 1px; border: 1px solid #ccc; font: normal 11px Verdana,Arial,sans-serif; margin: 5px 0px 5px 0px;">
        <tr class="PanelHeading">
            <th colspan="6" align="left">&nbsp;<b><i class="icon-chevron-right"></i>&nbsp; Import Deliverynote</b>
            </th>
        </tr>
        <tr id="docPanel">
            <td>
                <table>
                    <tr>
                        <td colspan="6">
                            <input type="file" name="uploadedFile" id="uploadedFile" value="" multiple="multiple" class="CuboidButton" />
                            <input type="button" value="Import PO" id="btnUploadDoc" class="CuboidButton" />
                            @*PO Status:
                            <select id="drpPOStatus" onchange="GetPOList();" class="CSSDropDownList">
                                <option value='OPEN'>Open</option>
                                <option value='CLOSED'>Closed</option>
                            </select>*@
                        </td>
                    </tr>
                </table>
            </td>
        </tr>
    </table>
</div>
<div id="divDocuments">
    <table class="WithBorderOnly" width="100%">
        <tr class="PanelHeading">
            <td colspan="6" class="PanelHeading">
                <i class="icon-chevron-right"></i>&nbsp;Deliverynote List&nbsp;
            </td>
        </tr>
        <tr>
            <td>
                <label class="lblheader">
                    Sector</label><br />
                @Html.DropDownList("Sector", new SelectList(Enumerable.Empty<SelectListItem>()), "Select One", new { @Class = "CSSDropDownList" })
            </td>
            <td>
                <label class="lblheader">
                    Contingent</label><br />
                @Html.DropDownList("Contingent", new SelectList(Enumerable.Empty<SelectListItem>()), "Select One", new { @Class = "CSSDropDownList" })
            </td>
            <td>
                <label class="lblheader">
                    Location</label><br />
                @Html.DropDownList("Location", new SelectList(Enumerable.Empty<SelectListItem>()), "Select One", new { @Class = "CSSDropDownList" })
            </td>
            <td>
                <label class="lblheader">
                    Period Year</label><br />
                @Html.DropDownList("PeriodYear", new SelectList(Enumerable.Empty<SelectListItem>()), "Select One", new { @Class = "CSSDropDownList" })
            </td>
            <td>
                <label class="lblheader">
                    Period</label><br />
                @Html.DropDownList("Period", new SelectList(Enumerable.Empty<SelectListItem>()), "Select One", new { @Class = "CSSDropDownList" })
            </td>
            <td>
                <input type="button" id="btnSearch" value="Search" onclick="OrdersSearch(); return false;" />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<input
                    type="reset" id="btnReset" onclick="ResetOrderSearch(); return false;" />
            </td>
        </tr>
    </table>
</div>
<fieldset>
    <table id="DeliveryNoteList">
    </table>
    <div id="DeliveryNoteListPager">
    </div>
</fieldset>
<div id="dvLoading">
</div>

@*<p id = "textDialogBox"></p>*@
